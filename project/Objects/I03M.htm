<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\I03M.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\I03M.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 31 15:06:58 2022
<BR><P>
<H3>Maximum Stack Usage =       1504 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
thread_storage_process &rArr; appl_usbh_copy_logger &rArr; appl_usbh_sn_cloud_id_set &rArr; module_sn_add &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1bc]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[26]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC_IRQHandler</a><BR>
 <LI><a href="#[34c]">USBH_DeviceRequest_ClearFeature</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[346]">USBH_ControlTransfer</a><BR>
 <LI><a href="#[151]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[151]">__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</a><BR>
 <LI><a href="#[1df]">ForceDataGc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[277]">RelocBlock</a><BR>
 <LI><a href="#[279]">UpdateBTT</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f1]">ScanTable</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d7]">AbortSequence</a> from nand_membus.o(i.AbortSequence) referenced from nand_membus.o(.constdata)
 <LI><a href="#[e]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d0]">ChipEnable</a> from nand_membus.o(i.ChipEnable) referenced from nand_membus.o(.constdata)
 <LI><a href="#[d8]">Control</a> from nand_membus.o(i.Control) referenced from nand_membus.o(.constdata)
 <LI><a href="#[62]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ce]">DevicePower</a> from nand_membus.o(i.DevicePower) referenced from nand_membus.o(.constdata)
 <LI><a href="#[51]">ETH_IRQHandler</a> from stm32f4xx_it.o(i.ETH_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from stm32f4xx_it.o(i.EXTI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from stm32f4xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[102]">EraseBlock</a> from fs_nand_media.o(i.EraseBlock) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[d6]">ExecuteSequence</a> from nand_membus.o(i.ExecuteSequence) referenced from nand_membus.o(.constdata)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ca]">GetCapabilities</a> from nand_membus.o(i.GetCapabilities) referenced from nand_membus.o(.constdata)
 <LI><a href="#[d1]">GetDeviceBusy</a> from nand_membus.o(i.GetDeviceBusy) referenced from nand_membus.o(.constdata)
 <LI><a href="#[104]">GetFeatures</a> from fs_nand_media.o(i.GetFeatures) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[d9]">GetStatus</a> from nand_membus.o(i.GetStatus) referenced from nand_membus.o(.constdata)
 <LI><a href="#[c9]">GetVersion</a> from nand_membus.o(i.GetVersion) referenced from nand_membus.o(.constdata)
 <LI><a href="#[63]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from stm32f4xx_it.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cb]">Initialize</a> from nand_membus.o(i.Initialize) referenced 2 times from nand_membus.o(.constdata)
 <LI><a href="#[da]">InquireECC</a> from nand_membus.o(i.InquireECC) referenced from nand_membus.o(.constdata)
 <LI><a href="#[d]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">ModuleTAS_AutoStatus</a> from module_tas.o(i.ModuleTAS_AutoStatus) referenced 2 times from module_tas.o(.data)
 <LI><a href="#[74]">NAND0_HW_SignalEventHandler</a> from fs_config.o(i.NAND0_HW_SignalEventHandler) referenced from fs_config.o(i.fs_config_nand)
 <LI><a href="#[75]">NAND0_Media_SignalEventHandler</a> from fs_config.o(i.NAND0_Media_SignalEventHandler) referenced from fs_config.o(i.fs_config_nand)
 <LI><a href="#[b]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_FS_IRQHandler</a> from otg_fs_stm32f4xx.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cd]">PowerControl</a> from nand_membus.o(i.PowerControl) referenced from nand_membus.o(.constdata)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">RTC_Alarm_IRQHandler</a> from stm32f4xx_it.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d4]">ReadData</a> from nand_membus.o(i.ReadData) referenced from nand_membus.o(.constdata)
 <LI><a href="#[fe]">ReadID</a> from fs_nand_media.o(i.ReadID) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[100]">ReadPage</a> from fs_nand_media.o(i.ReadPage) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[ff]">ReadParamPage</a> from fs_nand_media.o(i.ReadParamPage) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[103]">ReadStatus</a> from fs_nand_media.o(i.ReadStatus) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[fd]">ResetDevice</a> from fs_nand_media.o(i.ResetDevice) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d3]">SendAddress</a> from nand_membus.o(i.SendAddress) referenced from nand_membus.o(.constdata)
 <LI><a href="#[d2]">SendCommand</a> from nand_membus.o(i.SendCommand) referenced from nand_membus.o(.constdata)
 <LI><a href="#[105]">SetFeatures</a> from fs_nand_media.o(i.SetFeatures) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[13]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from rtx_kernel.o(i.svcRtxKernelStart)
 <LI><a href="#[65]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[16]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from stm32f4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[39]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[fa]">USBH0_SignalPipeEvent</a> from usbh_config_0.o(i.USBH0_SignalPipeEvent) referenced from usbh_config_0.o(.constdata)
 <LI><a href="#[f9]">USBH0_SignalPortEvent</a> from usbh_config_0.o(i.USBH0_SignalPortEvent) referenced from usbh_config_0.o(.constdata)
 <LI><a href="#[72]">USBH_ConnectDebounce</a> from usbh_lib_core.o(i.USBH_ConnectDebounce) referenced from usbh_config_0.o(i.USBH_TimerCreate)
 <LI><a href="#[71]">USBH_Core_Thread</a> from usbh_lib_core.o(i.USBH_Core_Thread) referenced from usbh_config_0.o(i.USBH_ThreadCreate)
 <LI><a href="#[dc]">USBH_GetCapabilities</a> from usbh_fs_stm32f4xx.o(i.USBH_GetCapabilities) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[ec]">USBH_GetFrameNumber</a> from usbh_fs_stm32f4xx.o(i.USBH_GetFrameNumber) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[db]">USBH_GetVersion</a> from usbh_fs_stm32f4xx.o(i.USBH_GetVersion) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[dd]">USBH_Initialize</a> from usbh_fs_stm32f4xx.o(i.USBH_Initialize) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e5]">USBH_PipeCreate</a> from usbh_fs_stm32f4xx.o(i.USBH_PipeCreate) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e7]">USBH_PipeDelete</a> from usbh_fs_stm32f4xx.o(i.USBH_PipeDelete) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e6]">USBH_PipeModify</a> from usbh_fs_stm32f4xx.o(i.USBH_PipeModify) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e8]">USBH_PipeReset</a> from usbh_fs_stm32f4xx.o(i.USBH_PipeReset) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e9]">USBH_PipeTransfer</a> from usbh_fs_stm32f4xx.o(i.USBH_PipeTransfer) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[eb]">USBH_PipeTransferAbort</a> from usbh_fs_stm32f4xx.o(i.USBH_PipeTransferAbort) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[ea]">USBH_PipeTransferGetResult</a> from usbh_fs_stm32f4xx.o(i.USBH_PipeTransferGetResult) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e4]">USBH_PortGetState</a> from usbh_fs_stm32f4xx.o(i.USBH_PortGetState) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e1]">USBH_PortReset</a> from usbh_fs_stm32f4xx.o(i.USBH_PortReset) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e3]">USBH_PortResume</a> from usbh_fs_stm32f4xx.o(i.USBH_PortResume) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e2]">USBH_PortSuspend</a> from usbh_fs_stm32f4xx.o(i.USBH_PortSuspend) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[e0]">USBH_PortVbusOnOff</a> from usbh_fs_stm32f4xx.o(i.USBH_PortVbusOnOff) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[df]">USBH_PowerControl</a> from usbh_fs_stm32f4xx.o(i.USBH_PowerControl) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[de]">USBH_Uninitialize</a> from usbh_fs_stm32f4xx.o(i.USBH_Uninitialize) referenced from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[cc]">Uninitialize</a> from nand_membus.o(i.Uninitialize) referenced 2 times from nand_membus.o(.constdata)
 <LI><a href="#[f]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d5]">WriteData</a> from nand_membus.o(i.WriteData) referenced from nand_membus.o(.constdata)
 <LI><a href="#[101]">WritePage</a> from fs_nand_media.o(i.WritePage) referenced from fs_nand_media.o(.constdata)
 <LI><a href="#[cf]">WriteProtect</a> from nand_membus.o(i.WriteProtect) referenced from nand_membus.o(.constdata)
 <LI><a href="#[108]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[6f]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[6b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[6c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[6a]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[6d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[69]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[67]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[68]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[a5]">app_debug_thread</a> from thread_debug.o(i.app_debug_thread) referenced from thread_debug.o(i.thread_debug_init)
 <LI><a href="#[73]">appl_alarm_check</a> from appl_alarm.o(i.appl_alarm_check) referenced from appl_alarm.o(i.appl_alarm_check_init)
 <LI><a href="#[c2]">do_4g_trace</a> from thread_debug.o(i.do_4g_trace) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b0]">do_about</a> from thread_debug.o(i.do_about) referenced from thread_debug.o(.constdata)
 <LI><a href="#[bb]">do_add_sn</a> from thread_debug.o(i.do_add_sn) referenced from thread_debug.o(.constdata)
 <LI><a href="#[c1]">do_clear_backapp</a> from thread_debug.o(i.do_clear_backapp) referenced from thread_debug.o(.constdata)
 <LI><a href="#[c4]">do_cpu_handle</a> from thread_debug.o(i.do_cpu_handle) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b5]">do_file_flush</a> from thread_debug.o(i.do_file_flush) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b4]">do_format</a> from thread_debug.o(i.do_format) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b7]">do_generate</a> from thread_debug.o(i.do_generate) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b3]">do_get_file_infor</a> from thread_debug.o(i.do_get_file_infor) referenced from thread_debug.o(.constdata)
 <LI><a href="#[bd]">do_get_logger</a> from thread_debug.o(i.do_get_logger) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b2]">do_get_mem_infor</a> from thread_debug.o(i.do_get_mem_infor) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b1]">do_get_task_infor</a> from thread_debug.o(i.do_get_task_infor) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b8]">do_list_alarm</a> from thread_debug.o(i.do_list_alarm) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b9]">do_list_discharge</a> from thread_debug.o(i.do_list_discharge) referenced from thread_debug.o(.constdata)
 <LI><a href="#[c0]">do_list_file_index</a> from thread_debug.o(i.do_list_file_index) referenced from thread_debug.o(.constdata)
 <LI><a href="#[ba]">do_list_real</a> from thread_debug.o(i.do_list_real) referenced from thread_debug.o(.constdata)
 <LI><a href="#[b6]">do_list_sn</a> from thread_debug.o(i.do_list_sn) referenced from thread_debug.o(.constdata)
 <LI><a href="#[c3]">do_reboot</a> from thread_debug.o(i.do_reboot) referenced from thread_debug.o(.constdata)
 <LI><a href="#[be]">do_set_print</a> from thread_debug.o(i.do_set_print) referenced from thread_debug.o(.constdata)
 <LI><a href="#[bc]">do_set_soc</a> from thread_debug.o(i.do_set_soc) referenced from thread_debug.o(.constdata)
 <LI><a href="#[bf]">do_soc_trace</a> from thread_debug.o(i.do_soc_trace) referenced from thread_debug.o(.constdata)
 <LI><a href="#[ae]">file_store_cb</a> from thread_storage.o(i.file_store_cb) referenced from thread_storage.o(i.thread_storage_process)
 <LI><a href="#[6e]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[c5]">modbus_read_ro_regs_handler</a> from de_modbus_protocol.o(i.modbus_read_ro_regs_handler) referenced from de_modbus_protocol.o(.constdata)
 <LI><a href="#[c6]">modbus_read_rw_regs_handler</a> from de_modbus_protocol.o(i.modbus_read_rw_regs_handler) referenced from de_modbus_protocol.o(.constdata)
 <LI><a href="#[c7]">modbus_write_reg_handler</a> from de_modbus_protocol.o(i.modbus_write_reg_handler) referenced from de_modbus_protocol.o(.constdata)
 <LI><a href="#[c8]">modbus_write_regs_handler</a> from de_modbus_protocol.o(i.modbus_write_regs_handler) referenced from de_modbus_protocol.o(.constdata)
 <LI><a href="#[f2]">nand0_DevCtrl</a> from fs_config.o(i.nand0_DevCtrl) referenced from fs_config.o(.constdata)
 <LI><a href="#[ed]">nand0_Init</a> from fs_config.o(i.nand0_Init) referenced from fs_config.o(.constdata)
 <LI><a href="#[f1]">nand0_RdInfo</a> from fs_config.o(i.nand0_RdInfo) referenced from fs_config.o(.constdata)
 <LI><a href="#[ef]">nand0_RdSect</a> from fs_config.o(i.nand0_RdSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[ee]">nand0_UnInit</a> from fs_config.o(i.nand0_UnInit) referenced from fs_config.o(.constdata)
 <LI><a href="#[f0]">nand0_WrSect</a> from fs_config.o(i.nand0_WrSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[86]">osRtxIdleThread</a> from main.o(i.osRtxIdleThread) referenced from rtx_thread.o(i.osRtxThreadStartup)
 <LI><a href="#[9c]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(i.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(i.svcRtxMessageQueueNew)
 <LI><a href="#[9d]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(i.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(i.svcRtxSemaphoreNew)
 <LI><a href="#[9f]">osRtxThreadPostProcess</a> from rtx_thread.o(i.osRtxThreadPostProcess) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[107]">osRtxTimerSetup</a> from rtx_timer.o(i.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[106]">osRtxTimerThread</a> from rtx_timer.o(i.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[87]">osRtxTimerTick</a> from rtx_timer.o(i.osRtxTimerTick) referenced from rtx_timer.o(i.osRtxTimerSetup)
 <LI><a href="#[9e]">osThreadExit</a> from rtx_thread.o(i.osThreadExit) referenced from rtx_thread.o(i.svcRtxThreadNew)
 <LI><a href="#[77]">svcRtxDelay</a> from rtx_delay.o(i.svcRtxDelay) referenced from rtx_delay.o(i.osDelay)
 <LI><a href="#[78]">svcRtxKernelGetState</a> from rtx_kernel.o(i.svcRtxKernelGetState) referenced from rtx_kernel.o(i.osKernelGetState)
 <LI><a href="#[79]">svcRtxKernelGetSysTimerCount</a> from rtx_kernel.o(i.svcRtxKernelGetSysTimerCount) referenced from rtx_kernel.o(i.osKernelGetSysTimerCount)
 <LI><a href="#[7a]">svcRtxKernelGetSysTimerFreq</a> from rtx_kernel.o(i.svcRtxKernelGetSysTimerFreq) referenced from rtx_kernel.o(i.osKernelGetSysTimerFreq)
 <LI><a href="#[7b]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(i.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(i.osKernelGetTickCount)
 <LI><a href="#[7c]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(i.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(i.osKernelGetTickFreq)
 <LI><a href="#[7d]">svcRtxKernelInitialize</a> from rtx_kernel.o(i.svcRtxKernelInitialize) referenced from rtx_kernel.o(i.osKernelInitialize)
 <LI><a href="#[7e]">svcRtxKernelStart</a> from rtx_kernel.o(i.svcRtxKernelStart) referenced from rtx_kernel.o(i.osKernelStart)
 <LI><a href="#[7f]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(i.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(i.osMessageQueueGet)
 <LI><a href="#[80]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(i.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(i.osMessageQueueNew)
 <LI><a href="#[81]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(i.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(i.osMessageQueuePut)
 <LI><a href="#[82]">svcRtxMutexAcquire</a> from rtx_mutex.o(i.svcRtxMutexAcquire) referenced from rtx_mutex.o(i.osMutexAcquire)
 <LI><a href="#[83]">svcRtxMutexDelete</a> from rtx_mutex.o(i.svcRtxMutexDelete) referenced from rtx_mutex.o(i.osMutexDelete)
 <LI><a href="#[84]">svcRtxMutexNew</a> from rtx_mutex.o(i.svcRtxMutexNew) referenced from rtx_mutex.o(i.osMutexNew)
 <LI><a href="#[85]">svcRtxMutexRelease</a> from rtx_mutex.o(i.svcRtxMutexRelease) referenced from rtx_mutex.o(i.osMutexRelease)
 <LI><a href="#[88]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(i.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(i.osSemaphoreAcquire)
 <LI><a href="#[89]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(i.svcRtxSemaphoreDelete) referenced from rtx_semaphore.o(i.osSemaphoreDelete)
 <LI><a href="#[8a]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(i.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(i.osSemaphoreNew)
 <LI><a href="#[8b]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(i.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(i.osSemaphoreRelease)
 <LI><a href="#[8c]">svcRtxThreadEnumerate</a> from rtx_thread.o(i.svcRtxThreadEnumerate) referenced from rtx_thread.o(i.osThreadEnumerate)
 <LI><a href="#[8d]">svcRtxThreadExit</a> from rtx_thread.o(i.svcRtxThreadExit) referenced from rtx_thread.o(i.osThreadExit)
 <LI><a href="#[8e]">svcRtxThreadFlagsSet</a> from rtx_thread.o(i.svcRtxThreadFlagsSet) referenced from rtx_thread.o(i.osThreadFlagsSet)
 <LI><a href="#[8f]">svcRtxThreadFlagsWait</a> from rtx_thread.o(i.svcRtxThreadFlagsWait) referenced from rtx_thread.o(i.osThreadFlagsWait)
 <LI><a href="#[90]">svcRtxThreadGetCount</a> from rtx_thread.o(i.svcRtxThreadGetCount) referenced from rtx_thread.o(i.osThreadGetCount)
 <LI><a href="#[91]">svcRtxThreadGetId</a> from rtx_thread.o(i.svcRtxThreadGetId) referenced from rtx_thread.o(i.osThreadGetId)
 <LI><a href="#[92]">svcRtxThreadGetName</a> from rtx_thread.o(i.svcRtxThreadGetName) referenced from rtx_thread.o(i.osThreadGetName)
 <LI><a href="#[93]">svcRtxThreadGetPriority</a> from rtx_thread.o(i.svcRtxThreadGetPriority) referenced from rtx_thread.o(i.osThreadGetPriority)
 <LI><a href="#[94]">svcRtxThreadGetStackSpace</a> from rtx_thread.o(i.svcRtxThreadGetStackSpace) referenced from rtx_thread.o(i.osThreadGetStackSpace)
 <LI><a href="#[95]">svcRtxThreadNew</a> from rtx_thread.o(i.svcRtxThreadNew) referenced from rtx_thread.o(i.osThreadNew)
 <LI><a href="#[96]">svcRtxThreadResume</a> from rtx_thread.o(i.svcRtxThreadResume) referenced from rtx_thread.o(i.osThreadResume)
 <LI><a href="#[97]">svcRtxThreadSuspend</a> from rtx_thread.o(i.svcRtxThreadSuspend) referenced from rtx_thread.o(i.osThreadSuspend)
 <LI><a href="#[98]">svcRtxThreadTerminate</a> from rtx_thread.o(i.svcRtxThreadTerminate) referenced from rtx_thread.o(i.osThreadTerminate)
 <LI><a href="#[99]">svcRtxTimerDelete</a> from rtx_timer.o(i.svcRtxTimerDelete) referenced from rtx_timer.o(i.osTimerDelete)
 <LI><a href="#[9a]">svcRtxTimerNew</a> from rtx_timer.o(i.svcRtxTimerNew) referenced from rtx_timer.o(i.osTimerNew)
 <LI><a href="#[9b]">svcRtxTimerStart</a> from rtx_timer.o(i.svcRtxTimerStart) referenced from rtx_timer.o(i.osTimerStart)
 <LI><a href="#[a9]">thread_485_1_process</a> from thread_rs485_1.o(i.thread_485_1_process) referenced from thread_rs485_1.o(i.thread_rs485_1_init)
 <LI><a href="#[aa]">thread_485_2_process</a> from thread_rs485_2.o(i.thread_485_2_process) referenced from thread_rs485_2.o(i.thread_rs485_2_init)
 <LI><a href="#[ab]">thread_485_3_process</a> from thread_rs485_3.o(i.thread_485_3_process) referenced from thread_rs485_3.o(i.thread_rs485_3_init)
 <LI><a href="#[a0]">thread_comm_i03t_process</a> from thread_comm_i03t.o(i.thread_comm_i03t_process) referenced from thread_comm_i03t.o(i.thread_comm_i03t_init)
 <LI><a href="#[a1]">thread_comm_i03t_rx_process</a> from thread_comm_i03t.o(i.thread_comm_i03t_rx_process) referenced from thread_comm_i03t.o(i.thread_comm_i03t_init)
 <LI><a href="#[a3]">thread_command_process</a> from thread_command.o(i.thread_command_process) referenced from thread_command.o(i.thread_command_init)
 <LI><a href="#[a4]">thread_cpustat_process</a> from thread_cpustat.o(i.thread_cpustat_process) referenced from thread_cpustat.o(i.thread_cpustat_init)
 <LI><a href="#[76]">thread_init_process</a> from threads_init.o(i.thread_init_process) referenced from main.o(i.main)
 <LI><a href="#[a6]">thread_key_process</a> from thread_key.o(i.thread_key_process) referenced from thread_key.o(i.thread_key_init)
 <LI><a href="#[a7]">thread_lcd_process</a> from thread_lcd.o(i.thread_lcd_process) referenced from thread_lcd.o(i.thread_lcd_init)
 <LI><a href="#[a2]">thread_protocol_master_process</a> from thread_comm_i03t.o(i.thread_protocol_master_process) referenced from thread_comm_i03t.o(i.thread_comm_i03t_init)
 <LI><a href="#[a8]">thread_protocol_process</a> from thread_protocol_process.o(i.thread_protocol_process) referenced from thread_protocol_process.o(i.thread_protocol_process_init)
 <LI><a href="#[ac]">thread_soc_process</a> from thread_soc.o(i.thread_soc_process) referenced from thread_soc.o(i.thread_soc_init)
 <LI><a href="#[ad]">thread_storage_process</a> from thread_storage.o(i.thread_storage_process) referenced from thread_storage.o(i.thread_storage_init)
 <LI><a href="#[af]">thread_usbh_process</a> from thread_usbh.o(i.thread_usbh_process) referenced from thread_usbh.o(i.thread_usbh_init)
 <LI><a href="#[f8]">usb0_DevCtrl</a> from fs_config.o(i.usb0_DevCtrl) referenced from fs_config.o(.constdata)
 <LI><a href="#[f3]">usb0_Init</a> from fs_config.o(i.usb0_Init) referenced from fs_config.o(.constdata)
 <LI><a href="#[f7]">usb0_RdInfo</a> from fs_config.o(i.usb0_RdInfo) referenced from fs_config.o(.constdata)
 <LI><a href="#[f5]">usb0_RdSect</a> from fs_config.o(i.usb0_RdSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[f4]">usb0_UnInit</a> from fs_config.o(i.usb0_UnInit) referenced from fs_config.o(.constdata)
 <LI><a href="#[f6]">usb0_WrSect</a> from fs_config.o(i.usb0_WrSect) referenced from fs_config.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[108]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[110]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5ed]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5ee]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5ef]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[5f0]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[5f1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[111]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[16a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[113]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[115]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[117]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[118]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[119]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[5f2]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[11b]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11e]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[121]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[123]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[125]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[126]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[127]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[129]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[5f3]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[12b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[12d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[12f]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[131]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[5f4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[149]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[133]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[135]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5f5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[5f6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[137]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[5f7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[139]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[5f8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[5f9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[5fa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[5fb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[5fc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[5fd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[5fe]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[5ff]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[600]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[601]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[602]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[603]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[604]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[605]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[606]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[607]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[608]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[609]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[140]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[60a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[60b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[60c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[60d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[60e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[60f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[10f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[610]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[144]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[146]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[148]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[611]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1c4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[612]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[14f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_it.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; Hard_Fault_Handler &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[613]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[614]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[615]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[616]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[617]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[538]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[618]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[619]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[53b]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[61a]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[61b]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text), UNUSED)

<P><STRONG><a name="[537]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[151]"></a>__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_mempool.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[2fb]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[61c]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[61d]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[61e]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[61f]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fd]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>

<P><STRONG><a name="[620]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[621]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[622]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[2fa]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>

<P><STRONG><a name="[623]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[624]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)

<P><STRONG><a name="[152]"></a>__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_link_put
</UL>

<P><STRONG><a name="[625]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[626]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[627]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[628]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[629]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[62a]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[330]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
</UL>

<P><STRONG><a name="[62b]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[62c]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[62d]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[32e]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
</UL>

<P><STRONG><a name="[62e]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[153]"></a>__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_link_put
</UL>

<P><STRONG><a name="[62f]"></a>__asm___12_rtx_system_c_024f2f18__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[630]"></a>__asm___12_rtx_system_c_024f2f18__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[631]"></a>__asm___12_rtx_system_c_024f2f18__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[632]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[633]"></a>__asm___12_rtx_system_c_024f2f18__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[634]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[4da]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
</UL>

<P><STRONG><a name="[4d8]"></a>__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[635]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[636]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[4d7]"></a>__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[637]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)

<P><STRONG><a name="[154]"></a>__asm___12_rtx_system_c_024f2f18__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_system.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_link_put
</UL>

<P><STRONG><a name="[638]"></a>__asm___12_rtx_thread_c_add96be5__atomic_wr8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[33c]"></a>__asm___12_rtx_thread_c_add96be5__atomic_set32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
</UL>

<P><STRONG><a name="[639]"></a>__asm___12_rtx_thread_c_add96be5__atomic_clr32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[339]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_all</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[33a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_chk32_any</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>

<P><STRONG><a name="[63a]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[63b]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[63c]"></a>__asm___12_rtx_thread_c_add96be5__atomic_inc16_lim</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[63d]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[63e]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec32_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[63f]"></a>__asm___12_rtx_thread_c_add96be5__atomic_dec16_nz</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[640]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)

<P><STRONG><a name="[155]"></a>__asm___12_rtx_thread_c_add96be5__atomic_link_put</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_link_put
</UL>

<P><STRONG><a name="[1e3]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogueData
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_test
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[641]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(i.svcRtxKernelStart)
<LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[642]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[643]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
</UL>

<P><STRONG><a name="[644]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[15c]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[15e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[160]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_dump
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_hist
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_discharge
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_charge
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_alarm
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_test
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_get_reboot
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvgBarDiagram
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>

<P><STRONG><a name="[162]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[163]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[161]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[11c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[167]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[122]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[12a]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[114]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[168]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[16b]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
</UL>

<P><STRONG><a name="[16d]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1b3]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[16f]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_soc
</UL>

<P><STRONG><a name="[171]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[645]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[646]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[17b]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>

<P><STRONG><a name="[17c]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fseek_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fseek &rArr; _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
</UL>

<P><STRONG><a name="[17d]"></a>clearerr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, clearerr_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clearerr &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>

<P><STRONG><a name="[17e]"></a>ferror</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ferror_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ferror &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>

<P><STRONG><a name="[17f]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[180]"></a>$Super$$fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[183]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[184]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>

<P><STRONG><a name="[186]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[138]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[313]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_soc_trace
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_soc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_print
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_discharge
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_alarm
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_logger
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_handle
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_4g_trace
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandHandle
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTAS_AutoStatus
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTAS_RxMsgHandle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleETH_RxMsgHandle
</UL>

<P><STRONG><a name="[276]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_find_i03t_cloud_id
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
</UL>

<P><STRONG><a name="[409]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_factory
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filename
</UL>

<P><STRONG><a name="[187]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[2c5]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_test
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_get_reboot
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_upgrade
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_sn
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_i03m
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_4g_msg_put
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_upgrade
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_msg_put
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_master_msg_put
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package_fill
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_package
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package_fun_03_04
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[188]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[647]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_system_format
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexUpdata
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexClear
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_terminate
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_init
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_init
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_3_init
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_2_init
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_1_init
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_debug_init
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_cpustat_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_init
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_init
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_load
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_initialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[648]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[649]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[64a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashCheck
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJourn
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[18c]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[18b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetTime
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_hist
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_discharge
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_charge
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_alarm
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_test
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetAlarm
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyInit
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_remove_addr
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add_addr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashCheck
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Deinit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_terminate
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_check_access
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_factory
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_software_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_thread
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_3_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_2_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_1_process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_rx_process
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_load
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_noinit_load
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_load
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryUninitializeLib
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitializeLib
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Configure
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>

<P><STRONG><a name="[64b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[64c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3e0]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[18e]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
</UL>

<P><STRONG><a name="[190]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03m_rw_reg_value
</UL>

<P><STRONG><a name="[64d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[64e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[15b]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[192]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[185]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[196]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[179]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[197]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[198]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[164]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[165]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[166]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[112]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[64f]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[15d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[68]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[1a2]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[12c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[12e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1a3]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[124]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[120]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[128]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[16e]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[16c]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[69]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[173]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[650]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1a8]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[177]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[1ab]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[18f]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[651]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[13a]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[652]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[653]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[1ae]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[136]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _init_alloc &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1b0]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1a1]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1b2]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[130]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[132]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[1a6]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1a7]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[19a]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b4]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[1b8]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[1b6]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1c0]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>

<P><STRONG><a name="[654]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1c3]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[655]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[141]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[1a4]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[145]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1ad]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[15f]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1bd]"></a>fgets</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fgets_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fgets &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
</UL>

<P><STRONG><a name="[1bb]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1bf]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
</UL>

<P><STRONG><a name="[1c2]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
</UL>

<P><STRONG><a name="[1b7]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[14c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1af]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[656]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[657]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[658]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[1c6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[150]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1c8]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[1c9]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[1ca]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[19b]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1cc]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1cb]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1cd]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1ce]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[19c]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19d]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1cf]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1d0]"></a>AlarmDiagram</STRONG> (Thumb, 758 bytes, Stack size 32 bytes, module_lcd_gui.o(i.AlarmDiagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = AlarmDiagram &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarm
</UL>

<P><STRONG><a name="[1d7]"></a>AlarmInfo</STRONG> (Thumb, 3878 bytes, Stack size 120 bytes, module_lcd_gui.o(i.AlarmInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = AlarmInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellArlamCount
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[1e1]"></a>AnalogueData</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, module_lcd_gui.o(i.AnalogueData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AnalogueData &rArr; i03t_node_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindI03T
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[1e4]"></a>App_deep_cycle_time</STRONG> (Thumb, 824 bytes, Stack size 104 bytes, app_soc.o(i.App_deep_cycle_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_deep_cycle_time &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[1ec]"></a>App_soc_intial</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, app_soc.o(i.App_soc_intial))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = App_soc_intial &rArr; SOC_EKF_initialize &rArr; rt_InitInfAndNaN &rArr; rtGetNaN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_initialize
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_initialize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_initialize
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[1f0]"></a>App_soc_process</STRONG> (Thumb, 1778 bytes, Stack size 72 bytes, app_soc.o(i.App_soc_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = App_soc_process &rArr; SOC_EKF_step &rArr; rt_powd_snf &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_step
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[1f6]"></a>App_soc_terminate</STRONG> (Thumb, 34 bytes, Stack size 72 bytes, app_soc.o(i.App_soc_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = App_soc_terminate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[5d4]"></a>App_soh_intial</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, app_soc.o(i.App_soh_intial))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = App_soh_intial
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[1f7]"></a>App_soh_process</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, app_soc.o(i.App_soh_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = App_soh_process &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soh_dec_handle
</UL>

<P><STRONG><a name="[1fa]"></a>App_standby_time</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, app_soc.o(i.App_standby_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = App_standby_time &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[1fb]"></a>BaryDiagram</STRONG> (Thumb, 2258 bytes, Stack size 32 bytes, module_lcd_gui.o(i.BaryDiagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = BaryDiagram &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowT
</UL>

<P><STRONG><a name="[1fc]"></a>BaryInfo</STRONG> (Thumb, 3796 bytes, Stack size 96 bytes, module_lcd_gui.o(i.BaryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = BaryInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowT
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[1fd]"></a>Bsp_BeepOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_BeepOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_BeepOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beeps
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
</UL>

<P><STRONG><a name="[1ff]"></a>Bsp_BeepToggle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_BeepToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_BeepToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[201]"></a>Bsp_Beeps</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_gpio.o(i.Bsp_Beeps))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_Beeps &rArr; Bsp_TimerStop &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerStop
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerStart
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BeepOff
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[205]"></a>Bsp_Com1Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_Com1Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Com1Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
</UL>

<P><STRONG><a name="[206]"></a>Bsp_Com2Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_Com2Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Com2Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
</UL>

<P><STRONG><a name="[207]"></a>Bsp_Com3Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_Com3Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Com3Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
</UL>

<P><STRONG><a name="[208]"></a>Bsp_Com4Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_Com4Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Com4Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
</UL>

<P><STRONG><a name="[209]"></a>Bsp_DryPowerDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_DryPowerDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_DryPowerDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
</UL>

<P><STRONG><a name="[20a]"></a>Bsp_FlashEraseSector</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, bsp_flash.o(i.Bsp_FlashEraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bsp_FlashEraseSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GetFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
</UL>

<P><STRONG><a name="[20e]"></a>Bsp_FlashProgram</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bsp_flash.o(i.Bsp_FlashProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
</UL>

<P><STRONG><a name="[210]"></a>Bsp_FlashRead</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, bsp_flash.o(i.Bsp_FlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bsp_FlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
</UL>

<P><STRONG><a name="[211]"></a>Bsp_FlashReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_flash.o(i.Bsp_FlashReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashRead
</UL>

<P><STRONG><a name="[20b]"></a>Bsp_GetFlashSector</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, bsp_flash.o(i.Bsp_GetFlashSector))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashEraseSector
</UL>

<P><STRONG><a name="[212]"></a>Bsp_GpioInit</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, bsp_gpio.o(i.Bsp_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bsp_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedErrorOff
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DryPowerDisable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BeepOff
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com4Enable
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com3Enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com2Enable
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com1Enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[215]"></a>Bsp_KeyInit</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, bsp_key.o(i.Bsp_KeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Bsp_KeyInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[216]"></a>Bsp_LedCommuOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_LedCommuOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_LedCommuOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
</UL>

<P><STRONG><a name="[217]"></a>Bsp_LedCommuToggle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_LedCommuToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_LedCommuToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
</UL>

<P><STRONG><a name="[214]"></a>Bsp_LedErrorOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_LedErrorOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_LedErrorOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
</UL>

<P><STRONG><a name="[218]"></a>Bsp_LedErrorOn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_LedErrorOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_LedErrorOn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
</UL>

<P><STRONG><a name="[219]"></a>Bsp_LedErrorToggle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_LedErrorToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_LedErrorToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
</UL>

<P><STRONG><a name="[21a]"></a>Bsp_LedRunningOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_LedRunningOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_LedRunningOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
</UL>

<P><STRONG><a name="[21b]"></a>Bsp_LedRunningToggle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_LedRunningToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_LedRunningToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
</UL>

<P><STRONG><a name="[21c]"></a>Bsp_Rs485_1_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Bsp_Rs485_1_Init &rArr; MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_DeInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[220]"></a>Bsp_Rs485_1_SendBytes</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_1_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bsp_Rs485_1_SendBytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_protocol_send_bytes
</UL>

<P><STRONG><a name="[223]"></a>Bsp_Rs485_2_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Bsp_Rs485_2_Init &rArr; MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_DeInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[226]"></a>Bsp_Rs485_2_SendBytes</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_2_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bsp_Rs485_2_SendBytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_protocol_send_bytes
</UL>

<P><STRONG><a name="[227]"></a>Bsp_Rs485_3_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Bsp_Rs485_3_Init &rArr; MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_DeInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[22a]"></a>Bsp_Rs485_3_SendBytes</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_3_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bsp_Rs485_3_SendBytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_protocol_send_bytes
</UL>

<P><STRONG><a name="[22b]"></a>Bsp_Rs485_4_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Bsp_Rs485_4_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_DeInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[22e]"></a>Bsp_Rs485_4_SendBytes</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bsp_rs485.o(i.Bsp_Rs485_4_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bsp_Rs485_4_SendBytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_protocol_send_bytes
</UL>

<P><STRONG><a name="[22f]"></a>Bsp_RtcGetTime</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bsp_rtc.o(i.Bsp_RtcGetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_i03t
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_i03m
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_config_time
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_about
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_get_time
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03m_rw_reg_value
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03m_ro_reg_value
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvgBarDiagram
</UL>

<P><STRONG><a name="[232]"></a>Bsp_RtcSetAlarm</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bsp_rtc.o(i.Bsp_RtcSetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Bsp_RtcSetAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[235]"></a>Bsp_RtcSetTime</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bsp_rtc.o(i.Bsp_RtcSetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bsp_RtcSetTime &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
</UL>

<P><STRONG><a name="[238]"></a>Bsp_TimerInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_timer.o(i.Bsp_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bsp_TimerInit &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[202]"></a>Bsp_TimerStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_timer.o(i.Bsp_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beeps
</UL>

<P><STRONG><a name="[204]"></a>Bsp_TimerStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_timer.o(i.Bsp_TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_TimerStop &rArr; HAL_NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beeps
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerInit
</UL>

<P><STRONG><a name="[23e]"></a>Bsp_pvdInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_pvd.o(i.Bsp_pvdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_pvdInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnablePVD
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_ConfigPVD
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[273]"></a>CRC_Get32</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, crc_check.o(i.CRC_Get32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_Get32
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_load
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_by_index
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_load
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_noinit_store
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_noinit_load
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_load
</UL>

<P><STRONG><a name="[1d8]"></a>CellArlamCount</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, module_lcd_gui.o(i.CellArlamCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CellArlamCount &rArr; i03t_node_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
</UL>

<P><STRONG><a name="[248]"></a>CellDiagram</STRONG> (Thumb, 758 bytes, Stack size 32 bytes, module_lcd_gui.o(i.CellDiagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = CellDiagram &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCell
</UL>

<P><STRONG><a name="[249]"></a>CellInfo</STRONG> (Thumb, 1452 bytes, Stack size 96 bytes, module_lcd_gui.o(i.CellInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CellInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCell
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[24a]"></a>CheckCRCModBus2</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, program.o(i.CheckCRCModBus2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCRCModBus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package_fun_03_04
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16_check_conti_write
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16_check
</UL>

<P><STRONG><a name="[1d4]"></a>Chinese_Show_one</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, bsp_lcd.o(i.Chinese_Show_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Chinese_Show_one &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvgBarDiagram
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuDiagram
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>

<P><STRONG><a name="[20]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d2]"></a>DownFindTNumber</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, thread_key.o(i.DownFindTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[51]"></a>ETH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.ETH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[234]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetAlarm
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
</UL>

<P><STRONG><a name="[515]"></a>EvrRtxDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelay))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[54e]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[518]"></a>EvrRtxDelayError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayError))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[59a]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxDelayStarted))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[551]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[51f]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[52d]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[59b]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[59f]"></a>EvrRtxKernelGetSysTimerCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetSysTimerCount))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[5a1]"></a>EvrRtxKernelGetSysTimerFreq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetSysTimerFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
</UL>

<P><STRONG><a name="[5a2]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
</UL>

<P><STRONG><a name="[5a3]"></a>EvrRtxKernelGetTickFreq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
</UL>

<P><STRONG><a name="[51e]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[5a4]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[520]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[5a9]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[530]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[536]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[53a]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[53d]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[533]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[535]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[554]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[5ab]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[4c8]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueError))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[521]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[5aa]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[555]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4ce]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[542]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[524]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[4cf]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[4cb]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[525]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[5ac]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[556]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[4ca]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[526]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[5ad]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[552]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[546]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[5b0]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexCreated))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[52a]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexDelete))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[5af]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[529]"></a>EvrRtxMutexError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexError))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[52b]"></a>EvrRtxMutexNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[5ae]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[52c]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[545]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[56e]"></a>EvrRtxSemaphoreAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[5b1]"></a>EvrRtxSemaphoreAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[553]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[54a]"></a>EvrRtxSemaphoreAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[5b3]"></a>EvrRtxSemaphoreCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreCreated))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
</UL>

<P><STRONG><a name="[572]"></a>EvrRtxSemaphoreDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[5b2]"></a>EvrRtxSemaphoreDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
</UL>

<P><STRONG><a name="[4d1]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreError))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[573]"></a>EvrRtxSemaphoreNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[571]"></a>EvrRtxSemaphoreNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
</UL>

<P><STRONG><a name="[574]"></a>EvrRtxSemaphoreRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreRelease))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[4d2]"></a>EvrRtxSemaphoreReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxSemaphoreReleased))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[567]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[5b9]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[55c]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[577]"></a>EvrRtxThreadEnumerate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadEnumerate))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadEnumerate
</UL>

<P><STRONG><a name="[579]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[578]"></a>EvrRtxThreadExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[4d4]"></a>EvrRtxThreadFlagsError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsError))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[57a]"></a>EvrRtxThreadFlagsSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsSet))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[4d5]"></a>EvrRtxThreadFlagsSetDone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsSetDone))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[57b]"></a>EvrRtxThreadFlagsWait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>

<P><STRONG><a name="[563]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[5b7]"></a>EvrRtxThreadFlagsWaitNotCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitNotCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[5b6]"></a>EvrRtxThreadFlagsWaitPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitPending))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[54f]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[57c]"></a>EvrRtxThreadGetCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetCount
</UL>

<P><STRONG><a name="[5b8]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>

<P><STRONG><a name="[57d]"></a>EvrRtxThreadGetName</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadGetName))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetName
</UL>

<P><STRONG><a name="[57e]"></a>EvrRtxThreadGetPriority</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadGetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetPriority
</UL>

<P><STRONG><a name="[57f]"></a>EvrRtxThreadGetStackSpace</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadGetStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetStackSpace
</UL>

<P><STRONG><a name="[561]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[580]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[54c]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadPreempted))
<BR><BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[581]"></a>EvrRtxThreadResume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadResume))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[5ba]"></a>EvrRtxThreadResumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadResumed))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
</UL>

<P><STRONG><a name="[582]"></a>EvrRtxThreadSuspend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadSuspend))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[5bb]"></a>EvrRtxThreadSuspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadSuspended))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[565]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadSwitched))
<BR><BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[583]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[557]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[56a]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[5be]"></a>EvrRtxTimerCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerCreated))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[584]"></a>EvrRtxTimerDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerDelete))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[5bd]"></a>EvrRtxTimerDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[587]"></a>EvrRtxTimerError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerError))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[588]"></a>EvrRtxTimerNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerNew))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[589]"></a>EvrRtxTimerStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[5bf]"></a>EvrRtxTimerStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(i.EvrRtxTimerStarted))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[280]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[281]"></a>FLASH_FlushCaches</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[20d]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashProgram
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashEraseSector
</UL>

<P><STRONG><a name="[293]"></a>FSMC_NAND_AttributeSpace_Timing_Init</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NAND_AttributeSpace_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NAND_AttributeSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[292]"></a>FSMC_NAND_CommonSpace_Timing_Init</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NAND_CommonSpace_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NAND_CommonSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[291]"></a>FSMC_NAND_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NAND_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[2ac]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[2aa]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[2ab]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[261]"></a>FS_USBH_MSC_DeviceCtrl</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbh_lib_msc.o(i.FS_USBH_MSC_DeviceCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FS_USBH_MSC_DeviceCtrl &rArr; USBH_MSC_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetStatus
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_DevCtrl
</UL>

<P><STRONG><a name="[264]"></a>FS_USBH_MSC_Initialize</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbh_lib_msc.o(i.FS_USBH_MSC_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FS_USBH_MSC_Initialize &rArr; USBH_MSC_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetStatus
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_Init
</UL>

<P><STRONG><a name="[265]"></a>FS_USBH_MSC_ReadInfo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_lib_msc.o(i.FS_USBH_MSC_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FS_USBH_MSC_ReadInfo &rArr; USBH_MSC_ReadCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_RdInfo
</UL>

<P><STRONG><a name="[267]"></a>FS_USBH_MSC_ReadSectors</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbh_lib_msc.o(i.FS_USBH_MSC_ReadSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = FS_USBH_MSC_ReadSectors &rArr; USBH_MSC_Read &rArr; USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_RdSect
</UL>

<P><STRONG><a name="[269]"></a>FS_USBH_MSC_Uninitialize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_lib_msc.o(i.FS_USBH_MSC_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FS_USBH_MSC_Uninitialize &rArr; USBH_MSC_SCSI_TestUnitReady &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_UnInit
</UL>

<P><STRONG><a name="[26c]"></a>FS_USBH_MSC_WriteSectors</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbh_lib_msc.o(i.FS_USBH_MSC_WriteSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = FS_USBH_MSC_WriteSectors &rArr; USBH_MSC_Write &rArr; USBH_MSC_SCSI_Write10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb0_WrSect
</UL>

<P><STRONG><a name="[26e]"></a>FileIndexClear</STRONG> (Thumb, 232 bytes, Stack size 176 bytes, thread_storage.o(i.FileIndexClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FileIndexClear &rArr; FileIndex_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
</UL>

<P><STRONG><a name="[270]"></a>FileIndexUpdata</STRONG> (Thumb, 278 bytes, Stack size 176 bytes, thread_storage.o(i.FileIndexUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FileIndexUpdata &rArr; FileIndex_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[271]"></a>FileIndex_load</STRONG> (Thumb, 122 bytes, Stack size 200 bytes, module_index.o(i.FileIndex_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = FileIndex_load &rArr; storage_readbytes &rArr; Bsp_FlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load
</UL>

<P><STRONG><a name="[26f]"></a>FileIndex_save</STRONG> (Thumb, 228 bytes, Stack size 400 bytes, module_index.o(i.FileIndex_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = FileIndex_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_system_format
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexUpdata
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexClear
</UL>

<P><STRONG><a name="[1e2]"></a>FindI03T</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, module_lcd_gui.o(i.FindI03T))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniTNumber
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogueData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[251]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[27e]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PortReset
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_Disable
</UL>

<P><STRONG><a name="[20c]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashEraseSector
</UL>

<P><STRONG><a name="[20f]"></a>HAL_FLASH_Program</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashProgram
</UL>

<P><STRONG><a name="[599]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
</UL>

<P><STRONG><a name="[322]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsUnconfigure
</UL>

<P><STRONG><a name="[287]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[25a]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyUp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyRight
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLeft
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEnsur
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDown
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBack
</UL>

<P><STRONG><a name="[200]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedRunningToggle
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedErrorToggle
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedCommuToggle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BeepToggle
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedRunningOff
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedErrorOn
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedErrorOff
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedCommuOff
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_DryPowerDisable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BeepOff
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_SendBytes
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_SendBytes
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_SendBytes
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_SendBytes
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com4Enable
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com3Enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com2Enable
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Com1Enable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinVbusOnOff
</UL>

<P><STRONG><a name="[25f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[288]"></a>HAL_IWDG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[493]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
</UL>

<P><STRONG><a name="[31c]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>

<P><STRONG><a name="[289]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28b]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[28c]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[28f]"></a>HAL_NAND_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_hal_nand.o(i.HAL_NAND_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_NAND_Init &rArr; HAL_NAND_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_MspInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_CommonSpace_Timing_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_AttributeSpace_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
</UL>

<P><STRONG><a name="[290]"></a>HAL_NAND_MspInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_fsmc.o(i.HAL_NAND_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NAND_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
</UL>

<P><STRONG><a name="[23d]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerStop
</UL>

<P><STRONG><a name="[23a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerStart
</UL>

<P><STRONG><a name="[28e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[28a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[5c4]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[23f]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_ConfigPVD))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_pvdInit
</UL>

<P><STRONG><a name="[240]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_pvdInit
</UL>

<P><STRONG><a name="[296]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[297]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[29a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[299]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[29b]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[298]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[29d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[29e]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_rtc.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; soh_dec_handle &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soh_dec_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; soh_dec_handle &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[231]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>

<P><STRONG><a name="[230]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_RTC_Init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bsp_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[233]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 512 bytes, Stack size 28 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetAlarm
</UL>

<P><STRONG><a name="[237]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetTime
</UL>

<P><STRONG><a name="[236]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetTime
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[5c7]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_ResumeTick))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_SRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2a9]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bsp_lcd.o(i.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[28d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4e7]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[239]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerInit
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[23b]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerStart
</UL>

<P><STRONG><a name="[23c]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerStop
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2af]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Bsp_BeepToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2b2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Bsp_BeepToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_BeepToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_UART_DeInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_DeInit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_DeInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_DeInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_DeInit
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bsp_usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[2c1]"></a>HAL_UART_MspInit</STRONG> (Thumb, 702 bytes, Stack size 32 bytes, bsp_usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[33f]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[33e]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[109]"></a>Hard_Fault_Handler</STRONG> (Thumb, 174 bytes, Stack size 216 bytes, stm32f4xx_it.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Hard_Fault_Handler &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_dump
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendstring
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2c7]"></a>IAP_Deinit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iap.o(i.IAP_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IAP_Deinit &rArr; sys_free &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
</UL>

<P><STRONG><a name="[2c9]"></a>IAP_EraseAppBack</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iap.o(i.IAP_EraseAppBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IAP_EraseAppBack &rArr; storage_erasesector &rArr; Bsp_FlashEraseSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clear_backapp
</UL>

<P><STRONG><a name="[2ca]"></a>IAP_FlashCheck</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, iap.o(i.IAP_FlashCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IAP_FlashCheck &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Process
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
</UL>

<P><STRONG><a name="[58d]"></a>IAP_GetPackSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iap.o(i.IAP_GetPackSize))
<BR><BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_upgrade
</UL>

<P><STRONG><a name="[2cc]"></a>IAP_Init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, iap.o(i.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IAP_Init &rArr; IAP_EraseAppBack &rArr; storage_erasesector &rArr; Bsp_FlashEraseSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_EraseAppBack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_upgrade
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
</UL>

<P><STRONG><a name="[2cd]"></a>IAP_Process</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, iap.o(i.IAP_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = IAP_Process &rArr; IAP_FlashCheck &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashCheck
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_upgrade
</UL>

<P><STRONG><a name="[44f]"></a>IAP_SetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iap.o(i.IAP_SetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
</UL>

<P><STRONG><a name="[2cf]"></a>Image_Show</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, bsp_lcd.o(i.Image_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Image_Show &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvgBarDiagram
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuDiagram
</UL>

<P><STRONG><a name="[2d0]"></a>IniTNumber</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, module_lcd_gui.o(i.IniTNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IniTNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindI03T
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[2d8]"></a>KeyBack</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.KeyBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyBack
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[2da]"></a>KeyDown</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_key.o(i.KeyDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyDown
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[2db]"></a>KeyEnsur</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.KeyEnsur))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyEnsur
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[2dc]"></a>KeyLeft</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.KeyLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[2dd]"></a>KeyRight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.KeyRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[2de]"></a>KeyUp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_key.o(i.KeyUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[2df]"></a>LCD_Clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowT
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCell
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarm
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[2e2]"></a>LCD_Display_Dir</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1d6]"></a>LCD_DrawLine</STRONG> (Thumb, 176 bytes, Stack size 68 bytes, bsp_lcd.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuDiagram
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>

<P><STRONG><a name="[2e4]"></a>LCD_DrawPoint</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bsp_lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[2e5]"></a>LCD_DrawRectangle</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, bsp_lcd.o(i.LCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_DrawRectangle &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectBox
</UL>

<P><STRONG><a name="[250]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, bsp_lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Show
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
</UL>

<P><STRONG><a name="[1d2]"></a>LCD_Fill</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, bsp_lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_Fill &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNvgBar
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvgBarDiagram
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuDiagram
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>

<P><STRONG><a name="[2e8]"></a>LCD_Init</STRONG> (Thumb, 5842 bytes, Stack size 88 bytes, bsp_lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; MainMenu &rArr; MainMenuInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[2ed]"></a>LCD_Pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_Pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[2e9]"></a>LCD_RD_DATA</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2e3]"></a>LCD_Scan_Dir</STRONG> (Thumb, 560 bytes, Stack size 20 bytes, bsp_lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[2e0]"></a>LCD_SetCursor</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[1d5]"></a>LCD_ShowChar</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, bsp_lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuDiagram
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>

<P><STRONG><a name="[1d9]"></a>LCD_ShowNum</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, bsp_lcd.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
</UL>

<P><STRONG><a name="[1d3]"></a>LCD_ShowString</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, bsp_lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvgBarDiagram
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuDiagram
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>

<P><STRONG><a name="[2ee]"></a>LCD_ShowxNum</STRONG> (Thumb, 190 bytes, Stack size 60 bytes, bsp_lcd.o(i.LCD_ShowxNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_ShowxNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
</UL>

<P><STRONG><a name="[2e7]"></a>LCD_WR_DATA</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[2e6]"></a>LCD_WR_REG</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[2e1]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[2ec]"></a>LCD_WriteReg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>

<P><STRONG><a name="[2f2]"></a>MX_FSMC_Init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, bsp_fsmc.o(i.MX_FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_FSMC_Init &rArr; HAL_NAND_Init &rArr; HAL_NAND_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[2f3]"></a>MX_IWDG_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_wdt.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[2f4]"></a>MX_RTC_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetAlarm
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[22c]"></a>MX_USART1_UART_DeInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_usart.o(i.MX_USART1_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_USART1_UART_DeInit &rArr; HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_Init
</UL>

<P><STRONG><a name="[22d]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_Init
</UL>

<P><STRONG><a name="[228]"></a>MX_USART2_UART_DeInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_usart.o(i.MX_USART2_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_USART2_UART_DeInit &rArr; HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_Init
</UL>

<P><STRONG><a name="[229]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_Init
</UL>

<P><STRONG><a name="[224]"></a>MX_USART3_UART_DeInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_usart.o(i.MX_USART3_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_USART3_UART_DeInit &rArr; HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_Init
</UL>

<P><STRONG><a name="[225]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_Init
</UL>

<P><STRONG><a name="[2f5]"></a>MX_USART4_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_usart.o(i.MX_USART4_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART4_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_debug_init
</UL>

<P><STRONG><a name="[21e]"></a>MX_USART6_UART_DeInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_usart.o(i.MX_USART6_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_USART6_UART_DeInit &rArr; HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_Init
</UL>

<P><STRONG><a name="[21f]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_Init
</UL>

<P><STRONG><a name="[2eb]"></a>MainMenu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module_lcd_gui.o(i.MainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = MainMenu &rArr; MainMenuInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuDiagram
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[2f7]"></a>MainMenuDiagram</STRONG> (Thumb, 1920 bytes, Stack size 24 bytes, module_lcd_gui.o(i.MainMenuDiagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MainMenuDiagram &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Show
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[2f8]"></a>MainMenuInfo</STRONG> (Thumb, 1662 bytes, Stack size 112 bytes, module_lcd_gui.o(i.MainMenuInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MainMenuInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindI03T
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d3]"></a>MinTNumber</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, thread_key.o(i.MinTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[1ed]"></a>Model_simulation_initialize</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, app_soc.o(i.Model_simulation_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Model_simulation_initialize &rArr; RandSrcInitState_GZ
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrcInitState_GZ
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_intial
</UL>

<P><STRONG><a name="[1f2]"></a>Model_simulation_step</STRONG> (Thumb, 982 bytes, Stack size 128 bytes, app_soc.o(i.Model_simulation_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Model_simulation_step &rArr; Model_simulation_randn &rArr; Model_simulation_eml_rand_shr3cong &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_binlxpw
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
</UL>

<P><STRONG><a name="[30d]"></a>Module4G_Handle</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, module_4g.o(i.Module4G_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Module4G_Handle &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_RxMsgHandle
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_3_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_2_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_1_process
</UL>

<P><STRONG><a name="[30e]"></a>Module4G_RxMsgHandle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, module_4g.o(i.Module4G_RxMsgHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Module4G_RxMsgHandle &rArr; ModuleTAS_RxMsgHandle &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleZLG_RxMsgHandle
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleTAS_RxMsgHandle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleETH_RxMsgHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
</UL>

<P><STRONG><a name="[312]"></a>ModuleETH_RxMsgHandle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, module_eth.o(i.ModuleETH_RxMsgHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ModuleETH_RxMsgHandle &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_RxMsgHandle
</UL>

<P><STRONG><a name="[310]"></a>ModuleTAS_RxMsgHandle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, module_tas.o(i.ModuleTAS_RxMsgHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ModuleTAS_RxMsgHandle &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_RxMsgHandle
</UL>

<P><STRONG><a name="[311]"></a>ModuleZLG_RxMsgHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, module_zlg.o(i.ModuleZLG_RxMsgHandle))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_RxMsgHandle
</UL>

<P><STRONG><a name="[318]"></a>NAND_EccToLayout</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, fs_nand_media.o(i.NAND_EccToLayout))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NAND_EccToLayout
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_SetupLayout
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[317]"></a>NAND_SetupLayout</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, fs_nand_media.o(i.NAND_SetupLayout))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NAND_SetupLayout &rArr; NAND_EccToLayout
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EccToLayout
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[319]"></a>Noise_RandSrc_GZ_D</STRONG> (Thumb, 1412 bytes, Stack size 152 bytes, app_soc.o(i.Noise_RandSrc_GZ_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Noise_RandSrc_GZ_D &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_step
</UL>

<P><STRONG><a name="[1ee]"></a>Noise_initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_soc.o(i.Noise_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Noise_initialize &rArr; RandSrcInitState_GZ
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrcInitState_GZ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_intial
</UL>

<P><STRONG><a name="[1f3]"></a>Noise_step</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, app_soc.o(i.Noise_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Noise_step &rArr; Noise_RandSrc_GZ_D &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
</UL>

<P><STRONG><a name="[31a]"></a>NvgBarDiagram</STRONG> (Thumb, 1450 bytes, Stack size 64 bytes, module_lcd_gui.o(i.NvgBarDiagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = NvgBarDiagram &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Show
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNvgBar
</UL>

<P><STRONG><a name="[31b]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[5a7]"></a>OS_Tick_Enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[5a0]"></a>OS_Tick_GetClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetClock))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
</UL>

<P><STRONG><a name="[59c]"></a>OS_Tick_GetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[5a6]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[59e]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[59d]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_systick.o(i.OS_Tick_GetOverflow))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[5a5]"></a>OS_Tick_Setup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_systick.o(i.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[57]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, otg_fs_stm32f4xx.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_FS_IRQ &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31e]"></a>OTG_FS_PinVbusOnOff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, otg_fs_stm32f4xx.o(i.OTG_FS_PinVbusOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OTG_FS_PinVbusOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PortVbusOnOff
</UL>

<P><STRONG><a name="[31f]"></a>OTG_FS_PinsConfigure</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, otg_fs_stm32f4xx.o(i.OTG_FS_PinsConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OTG_FS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[321]"></a>OTG_FS_PinsUnconfigure</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, otg_fs_stm32f4xx.o(i.OTG_FS_PinsUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OTG_FS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
</UL>

<P><STRONG><a name="[3d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; soh_dec_handle &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a2]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[2a7]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[2a5]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[308]"></a>RandSrcInitState_GZ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_soc.o(i.RandSrcInitState_GZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RandSrcInitState_GZ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_initialize
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_initialize
</UL>

<P><STRONG><a name="[30c]"></a>RandSrc_GZ_D</STRONG> (Thumb, 1412 bytes, Stack size 152 bytes, app_soc.o(i.RandSrc_GZ_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RandSrc_GZ_D &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
</UL>

<P><STRONG><a name="[327]"></a>RefreshDataBlock</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, fs_nftl.o(i.RefreshDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = RefreshDataBlock &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
</UL>

<P><STRONG><a name="[1ef]"></a>SOC_EKF_initialize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_soc.o(i.SOC_EKF_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SOC_EKF_initialize &rArr; rt_InitInfAndNaN &rArr; rtGetNaN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_intial
</UL>

<P><STRONG><a name="[1f4]"></a>SOC_EKF_step</STRONG> (Thumb, 3286 bytes, Stack size 248 bytes, app_soc.o(i.SOC_EKF_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = SOC_EKF_step &rArr; rt_powd_snf &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_binlxpw
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
</UL>

<P><STRONG><a name="[32c]"></a>SelectBox</STRONG> (Thumb, 738 bytes, Stack size 8 bytes, thread_lcd.o(i.SelectBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SelectBox &rArr; LCD_DrawRectangle &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[333]"></a>ShowAlarm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module_lcd_gui.o(i.ShowAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ShowAlarm &rArr; AlarmInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[334]"></a>ShowCell</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module_lcd_gui.o(i.ShowCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ShowCell &rArr; CellInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[335]"></a>ShowNvgBar</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, module_lcd_gui.o(i.ShowNvgBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ShowNvgBar &rArr; NvgBarDiagram &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvgBarDiagram
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[336]"></a>ShowT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module_lcd_gui.o(i.ShowT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ShowT &rArr; BaryInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusShow
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
</UL>

<P><STRONG><a name="[2f6]"></a>StatusShow</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, module_lcd_gui.o(i.StatusShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = StatusShow &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_Show_one
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowT
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCell
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarm
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
</UL>

<P><STRONG><a name="[4e6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Bsp_BeepToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2ae]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USART6_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>USBH0_SignalPipeEvent</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH0_SignalPipeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH0_SignalPipeEvent &rArr; USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>USBH0_SignalPortEvent</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH0_SignalPortEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH0_SignalPortEvent &rArr; USBH_SignalPortEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPortEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[36d]"></a>USBH_CDC_Configure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CDC_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[373]"></a>USBH_CDC_Initialize_Lib</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CDC_Initialize_Lib))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[377]"></a>USBH_CDC_Unconfigure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CDC_Unconfigure))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[3b3]"></a>USBH_CDC_Uninitialize_Lib</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CDC_Uninitialize_Lib))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[72]"></a>USBH_ConnectDebounce</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_ConnectDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_ConnectDebounce &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_0.o(i.USBH_TimerCreate)
</UL>
<P><STRONG><a name="[346]"></a>USBH_ControlTransfer</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, usbh_lib_core.o(i.USBH_ControlTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexRelease
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_ClearFeature
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_ClearFeature
</UL>

<P><STRONG><a name="[71]"></a>USBH_Core_Thread</STRONG> (Thumb, 612 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_Core_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = USBH_Core_Thread &rArr; USBH_Engine &rArr; USBH_EnumerateDevice &rArr; USBH_MSC_Initialize_Lib &rArr; USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortGetState
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify_Lib
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_0.o(i.USBH_ThreadCreate)
</UL>
<P><STRONG><a name="[36c]"></a>USBH_CustomClass_Configure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CustomClass_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[370]"></a>USBH_CustomClass_Initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CustomClass_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[374]"></a>USBH_CustomClass_Unconfigure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CustomClass_Unconfigure))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[3b1]"></a>USBH_CustomClass_Uninitialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_CustomClass_Uninitialize))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[26a]"></a>USBH_Delay</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_Delay &rArr; USBH_MsToTick &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_Uninitialize
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverUninitialize
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[34c]"></a>USBH_DeviceRequest_ClearFeature</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_DeviceRequest_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = USBH_DeviceRequest_ClearFeature &rArr;  USBH_ControlTransfer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[359]"></a>USBH_DeviceRequest_GetDescriptor</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_DeviceRequest_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[35a]"></a>USBH_DeviceRequest_SetAddress</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_DeviceRequest_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = USBH_DeviceRequest_SetAddress &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[35b]"></a>USBH_DeviceRequest_SetConfiguration</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_DeviceRequest_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = USBH_DeviceRequest_SetConfiguration &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[380]"></a>USBH_DriverGetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_lib_drv.o(i.USBH_DriverGetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[37f]"></a>USBH_DriverGetVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_lib_drv.o(i.USBH_DriverGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[35c]"></a>USBH_DriverInitialize</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverInitialize &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[355]"></a>USBH_DriverPipeCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, usbh_lib_drv.o(i.USBH_DriverPipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
</UL>

<P><STRONG><a name="[35f]"></a>USBH_DriverPipeDelete</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPipeDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverPipeDelete &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
</UL>

<P><STRONG><a name="[348]"></a>USBH_DriverPipeModify</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, usbh_lib_drv.o(i.USBH_DriverPipeModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_DriverPipeModify &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[360]"></a>USBH_DriverPipeTransfer</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, usbh_lib_drv.o(i.USBH_DriverPipeTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[361]"></a>USBH_DriverPipeTransferAbort</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPipeTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverPipeTransferAbort &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[362]"></a>USBH_DriverPipeTransferGetResult</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_lib_drv.o(i.USBH_DriverPipeTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_DriverPipeTransferGetResult &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
</UL>

<P><STRONG><a name="[343]"></a>USBH_DriverPortGetState</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbh_lib_drv.o(i.USBH_DriverPortGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DriverPortGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ConnectDebounce
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[363]"></a>USBH_DriverPortReset</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverPortReset &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[364]"></a>USBH_DriverPortResume</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverPortResume &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[365]"></a>USBH_DriverPortSuspend</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverPortSuspend &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[351]"></a>USBH_DriverPortVbusOnOff</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortVbusOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverPortVbusOnOff &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
</UL>

<P><STRONG><a name="[366]"></a>USBH_DriverPowerControl</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_DriverPowerControl &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[367]"></a>USBH_DriverUninitialize</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbh_lib_drv.o(i.USBH_DriverUninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_DriverUninitialize &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
</UL>

<P><STRONG><a name="[31d]"></a>USBH_FS_IRQ</STRONG> (Thumb, 1060 bytes, Stack size 80 bytes, usbh_fs_stm32f4xx.o(i.USBH_FS_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_FS_IRQ &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[354]"></a>USBH_GetFree_PIPE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_lib_core.o(i.USBH_GetFree_PIPE))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
</UL>

<P><STRONG><a name="[379]"></a>USBH_Get_PipeCallback_of_Pipe</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_Get_PipeCallback_of_Pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Get_PipeCallback_of_Pipe
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
</UL>

<P><STRONG><a name="[37a]"></a>USBH_Get_Thread_ID_of_Pipe</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_Get_Thread_ID_of_Pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Get_Thread_ID_of_Pipe
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
</UL>

<P><STRONG><a name="[36e]"></a>USBH_HID_Configure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_HID_Configure))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[372]"></a>USBH_HID_Initialize_Lib</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_HID_Initialize_Lib))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[376]"></a>USBH_HID_Unconfigure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_HID_Unconfigure))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[3b2]"></a>USBH_HID_Uninitialize_Lib</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_config_0.o(i.USBH_HID_Uninitialize_Lib))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[37e]"></a>USBH_Initialize</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_Initialize &rArr; USBH_DefaultPipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerDelete
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerCreate
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadTerminate
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadCreate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreDelete
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreCreate
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexDelete
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexCreate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryGetPoolSize
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverGetVersion
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverGetCapabilities
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitialize
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
</UL>

<P><STRONG><a name="[36f]"></a>USBH_MSC_Configure</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, usbh_lib_msc.o(i.USBH_MSC_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_MSC_Configure &rArr; USBH_PipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[38d]"></a>USBH_MSC_DriveGetMediaStatus</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_DriveGetMediaStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MSC_DriveGetMediaStatus &rArr; USBH_MSC_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
</UL>

<P><STRONG><a name="[38e]"></a>USBH_MSC_DriveMount</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_DriveMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USBH_MSC_DriveMount &rArr; fmount &rArr; fat_mount &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
</UL>

<P><STRONG><a name="[38f]"></a>USBH_MSC_GetDevice</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_lib_msc.o(i.USBH_MSC_GetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_GetDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[263]"></a>USBH_MSC_GetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbh_lib_msc.o(i.USBH_MSC_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DriveGetMediaStatus
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_Initialize
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_DeviceCtrl
</UL>

<P><STRONG><a name="[394]"></a>USBH_MSC_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_msc.o(i.USBH_MSC_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[371]"></a>USBH_MSC_Initialize_Lib</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, usbh_lib_msc.o(i.USBH_MSC_Initialize_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USBH_MSC_Initialize_Lib &rArr; USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetDevice
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read10
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[268]"></a>USBH_MSC_Read</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, usbh_lib_msc.o(i.USBH_MSC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = USBH_MSC_Read &rArr; USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read10
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_ReadSectors
</UL>

<P><STRONG><a name="[266]"></a>USBH_MSC_ReadCapacity</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_lib_msc.o(i.USBH_MSC_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_ReadCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_ReadInfo
</UL>

<P><STRONG><a name="[375]"></a>USBH_MSC_Unconfigure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbh_lib_msc.o(i.USBH_MSC_Unconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_MSC_Unconfigure &rArr; USBH_PipeAbort &rArr; USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[398]"></a>USBH_MSC_Uninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_msc.o(i.USBH_MSC_Uninitialize))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Uninitialize_Lib
</UL>

<P><STRONG><a name="[397]"></a>USBH_MSC_Uninitialize_Lib</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_lib_msc.o(i.USBH_MSC_Uninitialize_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_Uninitialize_Lib
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[26d]"></a>USBH_MSC_Write</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, usbh_lib_msc.o(i.USBH_MSC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = USBH_MSC_Write &rArr; USBH_MSC_SCSI_Write10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write10
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_WriteSectors
</UL>

<P><STRONG><a name="[357]"></a>USBH_MemoryAllocate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_lib_core.o(i.USBH_MemoryAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_MemoryAllocate &rArr; USBH_MemoryAllocateLib
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocateLib
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write10
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read10
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_ClearFeature
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[399]"></a>USBH_MemoryAllocateLib</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbh_lib_mem.o(i.USBH_MemoryAllocateLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MemoryAllocateLib
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>

<P><STRONG><a name="[358]"></a>USBH_MemoryFree</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_MemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MemoryFree &rArr; USBH_MemoryFreeLib
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFreeLib
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write10
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read10
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_ClearFeature
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[39a]"></a>USBH_MemoryFreeLib</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbh_lib_mem.o(i.USBH_MemoryFreeLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MemoryFreeLib
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
</UL>

<P><STRONG><a name="[38a]"></a>USBH_MemoryGetPoolSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_lib_mem.o(i.USBH_MemoryGetPoolSize))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[385]"></a>USBH_MemoryInitialize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_MemoryInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_MemoryInitialize &rArr; USBH_MemoryInitializeLib &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitializeLib
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[39b]"></a>USBH_MemoryInitializeLib</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_lib_mem.o(i.USBH_MemoryInitializeLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_MemoryInitializeLib &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitialize
</UL>

<P><STRONG><a name="[3a7]"></a>USBH_MemoryIsInPool</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_lib_mem.o(i.USBH_MemoryIsInPool))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
</UL>

<P><STRONG><a name="[39c]"></a>USBH_MemoryUninitialize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_MemoryUninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBH_MemoryUninitialize &rArr; USBH_MemoryUninitializeLib &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryUninitializeLib
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
</UL>

<P><STRONG><a name="[39d]"></a>USBH_MemoryUninitializeLib</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbh_lib_mem.o(i.USBH_MemoryUninitializeLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_MemoryUninitializeLib &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryUninitialize
</UL>

<P><STRONG><a name="[347]"></a>USBH_MutexAcquire</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_MutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_MutexAcquire &rArr; USBH_MsToTick &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[382]"></a>USBH_MutexCreate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_MutexCreate &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[388]"></a>USBH_MutexDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_MutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MutexDelete &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[34d]"></a>USBH_MutexRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_MutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MutexRelease &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[3a3]"></a>USBH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_core.o(i.USBH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify_Lib
</UL>

<P><STRONG><a name="[396]"></a>USBH_PipeAbort</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbh_lib_core.o(i.USBH_PipeAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_PipeAbort &rArr; USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
</UL>

<P><STRONG><a name="[38b]"></a>USBH_PipeCreate</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, usbh_lib_core.o(i.USBH_PipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBH_PipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFree_PIPE
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Configure
</UL>

<P><STRONG><a name="[38c]"></a>USBH_PipeDelete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_PipeDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_PipeDelete &rArr; USBH_DriverPipeTransferAbort &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Configure
</UL>

<P><STRONG><a name="[34a]"></a>USBH_PipeReceive</STRONG> (Thumb, 644 bytes, Stack size 72 bytes, usbh_lib_core.o(i.USBH_PipeReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_PipeReceive &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryIsInPool
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write10
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read10
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[34b]"></a>USBH_PipeSend</STRONG> (Thumb, 668 bytes, Stack size 80 bytes, usbh_lib_core.o(i.USBH_PipeSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryIsInPool
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write10
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read10
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[35d]"></a>USBH_SemaphoreAcquire</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_SemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_SemaphoreAcquire &rArr; osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverUninitialize
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
</UL>

<P><STRONG><a name="[381]"></a>USBH_SemaphoreCreate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_SemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_SemaphoreCreate &rArr; osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[389]"></a>USBH_SemaphoreDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_SemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_SemaphoreDelete &rArr; osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[35e]"></a>USBH_SemaphoreRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_SemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverUninitialize
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
</UL>

<P><STRONG><a name="[340]"></a>USBH_SignalPipeEvent</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbh_lib_drv.o(i.USBH_SignalPipeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_Thread_ID_of_Pipe
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_PipeCallback_of_Pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_SignalPipeEvent
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
</UL>

<P><STRONG><a name="[341]"></a>USBH_SignalPortEvent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbh_lib_drv.o(i.USBH_SignalPortEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_SignalPortEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_SignalPortEvent
</UL>

<P><STRONG><a name="[384]"></a>USBH_ThreadCreate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_ThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_ThreadCreate &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[345]"></a>USBH_ThreadFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPortEvent
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ConnectDebounce
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[34e]"></a>USBH_ThreadFlagsWait</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_ThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBH_ThreadFlagsWait &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[3a6]"></a>USBH_ThreadGetHandle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_ThreadGetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_ThreadGetHandle &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[386]"></a>USBH_ThreadTerminate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_ThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_ThreadTerminate &rArr; osThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[383]"></a>USBH_TimerCreate</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbh_config_0.o(i.USBH_TimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_TimerCreate &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[387]"></a>USBH_TimerDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_TimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_TimerDelete &rArr; osTimerDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[344]"></a>USBH_TimerStart</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbh_config_0.o(i.USBH_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_TimerStart &rArr; USBH_MsToTick &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MsToTick
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ConnectDebounce
</UL>

<P><STRONG><a name="[3b0]"></a>USBH_Uninitialize</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USBH_Uninitialize &rArr; USBH_UninitializeDevices &rArr; USBH_MSC_Unconfigure &rArr; USBH_PipeAbort &rArr; USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerDelete
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadTerminate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreDelete
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexDelete
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverUninitialize
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryUninitialize
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
</UL>

<P><STRONG><a name="[5d1]"></a>UpFindTNumber</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, thread_key.o(i.UpFindTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
</UL>

<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[301]"></a>__hardfp_exp</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
</UL>

<P><STRONG><a name="[1f1]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_standby_time
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
</UL>

<P><STRONG><a name="[3ba]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
</UL>

<P><STRONG><a name="[303]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
</UL>

<P><STRONG><a name="[3bd]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
</UL>

<P><STRONG><a name="[30a]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __hardfp_sqrt &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_step
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
</UL>

<P><STRONG><a name="[3b9]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[3bc]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[3b6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[3be]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3bb]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[3b7]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[3b8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[3c3]"></a>__sys_close</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[3c8]"></a>__sys_flen</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[3cb]"></a>__sys_open</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[3d1]"></a>__sys_read</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[3d4]"></a>__sys_seek</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[3d7]"></a>__sys_write</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[159]"></a>__user_perthread_libspace</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_lib.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[3dc]"></a>_fdelete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mapi.o(i._fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _fdelete &rArr; fat_delete &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[169]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[10a]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[10b]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[10c]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_lib.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_initialize &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[10d]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[147]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[178]"></a>_sys_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[174]"></a>_sys_flen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[172]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[182]"></a>_sys_open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[1b5]"></a>_sys_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, retarget_io.o(i._sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[1a9]"></a>_sys_seek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1aa]"></a>_sys_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[a5]"></a>app_debug_thread</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, thread_debug.o(i.app_debug_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = app_debug_thread &rArr; de_protocol_process &rArr; protocol_handle_config &rArr; de_protocol_handle_config &rArr; module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandHandle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(i.thread_debug_init)
</UL>
<P><STRONG><a name="[73]"></a>appl_alarm_check</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, appl_alarm.o(i.appl_alarm_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = appl_alarm_check &rArr; appl_alarm_check_low &rArr; appl_alarm_clear_level
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_get_status
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_clear_level
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check_low
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_alarm.o(i.appl_alarm_check_init)
</UL>
<P><STRONG><a name="[3ee]"></a>appl_alarm_check_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, appl_alarm.o(i.appl_alarm_check_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = appl_alarm_check_init &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[3ec]"></a>appl_alarm_check_low</STRONG> (Thumb, 1180 bytes, Stack size 20 bytes, appl_alarm.o(i.appl_alarm_check_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = appl_alarm_check_low &rArr; appl_alarm_clear_level
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_clear_level
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check
</UL>

<P><STRONG><a name="[3eb]"></a>appl_alarm_clear_level</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, appl_alarm.o(i.appl_alarm_clear_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = appl_alarm_clear_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check_low
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check
</UL>

<P><STRONG><a name="[3ed]"></a>appl_alarm_get_status</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appl_alarm.o(i.appl_alarm_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appl_alarm_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_status_response_handle
</UL>

<P><STRONG><a name="[3ef]"></a>appl_comm_i03t_request_cell_alarmdata</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_cell_alarmdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = appl_comm_i03t_request_cell_alarmdata &rArr; i03t_module_query &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[3f1]"></a>appl_comm_i03t_request_cell_data</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_cell_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = appl_comm_i03t_request_cell_data &rArr; i03t_module_query &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[3f2]"></a>appl_comm_i03t_request_config</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = appl_comm_i03t_request_config &rArr; i03t_module_config &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_i03t
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[3f5]"></a>appl_comm_i03t_request_intres_sample</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_intres_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = appl_comm_i03t_request_intres_sample &rArr; i03t_module_control &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_intres_sample
</UL>

<P><STRONG><a name="[3f7]"></a>appl_comm_i03t_request_paradata</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_paradata))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = appl_comm_i03t_request_paradata &rArr; i03t_module_query &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[3f8]"></a>appl_comm_i03t_request_reset</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = appl_comm_i03t_request_reset &rArr; i03t_module_control &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[3f9]"></a>appl_comm_i03t_request_sn</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = appl_comm_i03t_request_sn &rArr; i03t_module_query &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_sn_synch_process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[3fa]"></a>appl_comm_i03t_request_status_data</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_status_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = appl_comm_i03t_request_status_data &rArr; i03t_module_query &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[3fb]"></a>appl_comm_i03t_request_synch_sn</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_synch_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = appl_comm_i03t_request_synch_sn &rArr; i03t_module_config &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_by_index
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_sn_synch_process
</UL>

<P><STRONG><a name="[3fd]"></a>appl_comm_i03t_request_upgrade</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, appl_comm_i03t.o(i.appl_comm_i03t_request_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = appl_comm_i03t_request_upgrade &rArr; i03t_module_request_upgrade &rArr; protocol_send_bytes &rArr; debug_sendbytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_request_upgrade
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
</UL>

<P><STRONG><a name="[3ff]"></a>appl_hardware_init</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, appl_hardware.o(i.appl_hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = appl_hardware_init &rArr; Bsp_Rs485_4_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_pvdInit
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TimerInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_GpioInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[401]"></a>appl_i03t_config_time</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, appl_comm_i03t.o(i.appl_i03t_config_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = appl_i03t_config_time &rArr; i03t_module_config &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[402]"></a>appl_i03t_intres_sample</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, appl_comm_i03t.o(i.appl_i03t_intres_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = appl_i03t_intres_sample &rArr; appl_comm_i03t_request_intres_sample &rArr; i03t_module_control &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_intres_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[403]"></a>appl_i03t_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, appl_comm_i03t.o(i.appl_i03t_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = appl_i03t_reset &rArr; appl_comm_i03t_request_reset &rArr; i03t_module_control &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[404]"></a>appl_i03t_sn_synch_process</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, appl_comm_i03t.o(i.appl_i03t_sn_synch_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = appl_i03t_sn_synch_process &rArr; appl_comm_i03t_request_synch_sn &rArr; i03t_module_config &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
</UL>

<P><STRONG><a name="[406]"></a>appl_noinit_load</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, appl_noinit.o(i.appl_noinit_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = appl_noinit_load &rArr; CRC_Get32
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[407]"></a>appl_noinit_store</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, appl_noinit.o(i.appl_noinit_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = appl_noinit_store &rArr; CRC_Get32
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_handle
</UL>

<P><STRONG><a name="[408]"></a>appl_para_factory</STRONG> (Thumb, 3552 bytes, Stack size 8 bytes, appl_para.o(i.appl_para_factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = appl_para_factory &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_init
</UL>

<P><STRONG><a name="[40a]"></a>appl_para_find_i03t_cloud_id</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, appl_para.o(i.appl_para_find_i03t_cloud_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appl_para_find_i03t_cloud_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
</UL>

<P><STRONG><a name="[40b]"></a>appl_para_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, appl_para.o(i.appl_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = appl_para_init &rArr; appl_para_load &rArr; storage_readbytes &rArr; Bsp_FlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_load
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_factory
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[40c]"></a>appl_para_load</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, appl_para.o(i.appl_para_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = appl_para_load &rArr; storage_readbytes &rArr; Bsp_FlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_init
</UL>

<P><STRONG><a name="[40d]"></a>appl_para_save</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, appl_para.o(i.appl_para_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = appl_para_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
</UL>

<P><STRONG><a name="[444]"></a>appl_rs485_conflict_check</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, appl_rs485_manage.o(i.appl_rs485_conflict_check))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
</UL>

<P><STRONG><a name="[40e]"></a>appl_software_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, appl_software.o(i.appl_software_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = appl_software_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[40f]"></a>appl_usbh_check_access</STRONG> (Thumb, 42 bytes, Stack size 280 bytes, appl_usbh.o(i.appl_usbh_check_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = appl_usbh_check_access &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[411]"></a>appl_usbh_clear_i03t</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, appl_usbh.o(i.appl_usbh_clear_i03t))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = appl_usbh_clear_i03t &rArr; module_sn_clear &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_file_flush
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_update
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_remove_addr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexClear
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_terminate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
</UL>

<P><STRONG><a name="[417]"></a>appl_usbh_copy_logger</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, appl_usbh.o(i.appl_usbh_copy_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = appl_usbh_copy_logger &rArr; appl_usbh_sn_cloud_id_set &rArr; module_sn_add &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[41c]"></a>appl_usbh_copy_sn</STRONG> (Thumb, 630 bytes, Stack size 440 bytes, appl_usbh.o(i.appl_usbh_copy_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = appl_usbh_copy_sn &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[41d]"></a>appl_usbh_i03m_token_set</STRONG> (Thumb, 242 bytes, Stack size 352 bytes, appl_usbh.o(i.appl_usbh_i03m_token_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = appl_usbh_i03m_token_set &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_4g_msg_put
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[41e]"></a>appl_usbh_sn_cloud_id_set</STRONG> (Thumb, 1742 bytes, Stack size 456 bytes, appl_usbh.o(i.appl_usbh_sn_cloud_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = appl_usbh_sn_cloud_id_set &rArr; module_sn_add &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_update
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add_addr
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[424]"></a>appl_usbh_upgrade</STRONG> (Thumb, 604 bytes, Stack size 392 bytes, appl_usbh.o(i.appl_usbh_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = appl_usbh_upgrade &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashCheck
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Deinit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[425]"></a>appl_usbh_upgrade_i03t</STRONG> (Thumb, 692 bytes, Stack size 424 bytes, appl_usbh.o(i.appl_usbh_upgrade_i03t))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = appl_usbh_upgrade_i03t &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_upgrade
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[5d5]"></a>bsp_pvd_get_power_flag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_pvd.o(i.bsp_pvd_get_power_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_pvd_get_power_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[42d]"></a>charge_store_process</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, thread_soc.o(i.charge_store_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = charge_store_process &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[3ea]"></a>commandHandle</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, thread_debug.o(i.commandHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = commandHandle &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_thread
</UL>

<P><STRONG><a name="[2ce]"></a>command_msg_put</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, thread_command.o(i.command_msg_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = command_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Process
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_control
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_reboot
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_handle
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03t_rw_reg_value
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
</UL>

<P><STRONG><a name="[432]"></a>cpustat_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, thread_cpustat.o(i.cpustat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cpustat_init &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[433]"></a>cpustat_print</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread_cpustat.o(i.cpustat_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = cpustat_print &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_handle
</UL>

<P><STRONG><a name="[43b]"></a>de_protocol_check</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, de_protocol.o(i.de_protocol_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = de_protocol_check &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_find_head
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_rx_process
</UL>

<P><STRONG><a name="[43e]"></a>de_protocol_handle_config</STRONG> (Thumb, 11174 bytes, Stack size 128 bytes, protocol_handle.o(i.de_protocol_handle_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = de_protocol_handle_config &rArr; module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetTime
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_4g_msg_put
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_update
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_remove_addr
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add_addr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexClear
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_find_i03t_cloud_id
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_msg_put
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_rs485_conflict_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_config
</UL>

<P><STRONG><a name="[445]"></a>de_protocol_handle_control</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, protocol_handle.o(i.de_protocol_handle_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = de_protocol_handle_control &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_control
</UL>

<P><STRONG><a name="[446]"></a>de_protocol_master_package</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, de_protocol.o(i.de_protocol_master_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = de_protocol_master_package &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_request_upgrade
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config
</UL>

<P><STRONG><a name="[447]"></a>de_protocol_master_process</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, de_protocol.o(i.de_protocol_master_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = de_protocol_master_process &rArr; i03t_module_query_config_response_handle &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_check
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_status_response_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control_response_handle
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config_response_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_master_process
</UL>

<P><STRONG><a name="[3e9]"></a>de_protocol_process</STRONG> (Thumb, 1076 bytes, Stack size 104 bytes, de_protocol.o(i.de_protocol_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = de_protocol_process &rArr; protocol_handle_config &rArr; de_protocol_handle_config &rArr; module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_set_query_start_cell_id
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_upgrade
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_control
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_config
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_check
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_thread
</UL>

<P><STRONG><a name="[452]"></a>de_protocol_slave_package</STRONG> (Thumb, 818 bytes, Stack size 72 bytes, de_protocol.o(i.de_protocol_slave_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = de_protocol_slave_package &rArr; fill_query_logger &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_logger
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_sn
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
</UL>

<P><STRONG><a name="[457]"></a>de_protocol_slave_package_fill</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, de_protocol.o(i.de_protocol_slave_package_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = de_protocol_slave_package_fill &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
</UL>

<P><STRONG><a name="[2d4]"></a>debug_printf</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, thread_debug.o(i.debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendbytes
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_check_access
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_sn_synch_process
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_intres_sample
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_dir
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpustat_print
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_soc_trace
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_soc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_print
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_file_index
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_mem_infor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_logger
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cpu_handle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_clear_backapp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_4g_trace
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_load
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_load
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_about
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_print_reboot_reason
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
</UL>

<P><STRONG><a name="[458]"></a>debug_sendbytes</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread_debug.o(i.debug_sendbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = debug_sendbytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_protocol_send_bytes
</UL>

<P><STRONG><a name="[241]"></a>debug_sendstring</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, thread_debug.o(i.debug_sendstring))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_dump
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[2ea]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[459]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[45d]"></a>discharge_store_process</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, thread_soc.o(i.discharge_store_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = discharge_store_process &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
</UL>

<P><STRONG><a name="[c2]"></a>do_4g_trace</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, thread_debug.o(i.do_4g_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = do_4g_trace &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>do_about</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, thread_debug.o(i.do_about))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = do_about &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>do_add_sn</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, thread_debug.o(i.do_add_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = do_add_sn &rArr; module_sn_test &rArr; module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>do_clear_backapp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread_debug.o(i.do_clear_backapp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = do_clear_backapp &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_EraseAppBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>do_cpu_handle</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, thread_debug.o(i.do_cpu_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_cpu_handle &rArr; cpustat_print &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpustat_print
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_noinit_store
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>do_file_flush</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, thread_debug.o(i.do_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = do_file_flush &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>do_format</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, thread_debug.o(i.do_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = do_format &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>do_generate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, thread_debug.o(i.do_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = do_generate &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>do_get_file_infor</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, thread_debug.o(i.do_get_file_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = do_get_file_infor &rArr; module_file_dir &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>do_get_logger</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, thread_debug.o(i.do_get_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = do_get_logger &rArr; logger_infor_load &rArr; logger_print_reboot_reason &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_load
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>do_get_mem_infor</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, thread_debug.o(i.do_get_mem_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = do_get_mem_infor &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>do_get_task_infor</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, thread_debug.o(i.do_get_task_infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = do_get_task_infor &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>do_list_alarm</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, thread_debug.o(i.do_list_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = do_list_alarm &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>do_list_discharge</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, thread_debug.o(i.do_list_discharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = do_list_discharge &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>do_list_file_index</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, thread_debug.o(i.do_list_file_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = do_list_file_index &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>do_list_real</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, thread_debug.o(i.do_list_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = do_list_real &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>do_list_sn</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, thread_debug.o(i.do_list_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = do_list_sn &rArr; module_sn_get_count &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>do_reboot</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread_debug.o(i.do_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = do_reboot &rArr; command_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>do_set_print</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, thread_debug.o(i.do_set_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = do_set_print &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>do_set_soc</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, thread_debug.o(i.do_set_soc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = do_set_soc &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>do_soc_trace</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, thread_debug.o(i.do_soc_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = do_soc_trace &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_debug.o(.constdata)
</UL>
<P><STRONG><a name="[3c6]"></a>efs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_close))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[3de]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_delete))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[495]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_ffind))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[3ca]"></a>efs_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_flen))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[498]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_format))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[49a]"></a>efs_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(i.efs_free))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[3cf]"></a>efs_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[4a1]"></a>efs_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_info))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
</UL>

<P><STRONG><a name="[4a3]"></a>efs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_init))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[4a4]"></a>efs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_mount))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[3d0]"></a>efs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_open))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3d3]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_read))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[3d6]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[3d9]"></a>efs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_write))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[468]"></a>elink_cmd</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, fs_fat_elink.o(i.elink_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = elink_cmd &rArr; elink_alloc &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_rewind
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[46a]"></a>elink_delete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = elink_delete &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_discon
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
</UL>

<P><STRONG><a name="[474]"></a>elink_dir</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_dir))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[48d]"></a>elink_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = elink_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[46b]"></a>elink_insert</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, fs_fat_elink.o(i.elink_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = elink_insert &rArr; delete_list_update &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[46c]"></a>elink_scan</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = elink_scan &rArr; delete_list_update &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_rewind
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[3c0]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3c5]"></a>fat_close</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[3dd]"></a>fat_delete</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fat_delete &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[47a]"></a>fat_ffind</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_time
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_date
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[3c9]"></a>fat_flen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.fat_flen))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[47d]"></a>fat_format</STRONG> (Thumb, 1240 bytes, Stack size 56 bytes, fs_fat.o(i.fat_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = fat_format &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>

<P><STRONG><a name="[483]"></a>fat_free</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fs_fat.o(i.fat_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fat_free &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[3cd]"></a>fat_handle_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fat_handle_get &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[484]"></a>fat_info</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_fat.o(i.fat_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fat_info &rArr; fat_vol_chk
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
</UL>

<P><STRONG><a name="[485]"></a>fat_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fat_init &rArr; fs_config &rArr; fs_config_nand &rArr; fs_mutex_new &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[481]"></a>fat_jour_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fs_fat.o(i.fat_jour_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_init
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[480]"></a>fat_jour_prep</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, fs_fat.o(i.fat_jour_prep))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_jour_prep &rArr; j_find_reg &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
</UL>

<P><STRONG><a name="[48c]"></a>fat_mount</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, fs_fat.o(i.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fat_mount &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[3ce]"></a>fat_open</STRONG> (Thumb, 448 bytes, Stack size 72 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3d2]"></a>fat_read</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[3d5]"></a>fat_seek</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[46e]"></a>fat_vol_chk</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fat_vol_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_info
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[3d8]"></a>fat_write</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[492]"></a>fdelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = fdelete &rArr; _fdelete &rArr; fat_delete &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_del
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
</UL>

<P><STRONG><a name="[420]"></a>feed_watchdog</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_wdt.o(i.feed_watchdog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = feed_watchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
</UL>

<P><STRONG><a name="[410]"></a>ffind</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_check_access
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_dir
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
</UL>

<P><STRONG><a name="[2d6]"></a>fformat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.fformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = fformat &rArr; fat_format &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_format
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_system_format
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
</UL>

<P><STRONG><a name="[499]"></a>ffree</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mapi.o(i.ffree))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ffree &rArr; fat_free &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_dir
</UL>

<P><STRONG><a name="[1be]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[ae]"></a>file_store_cb</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, thread_storage.o(i.file_store_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = file_store_cb &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_storage.o(i.thread_storage_process)
</UL>
<P><STRONG><a name="[456]"></a>fill_query_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, protocol_handle.o(i.fill_query_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fill_query_config &rArr; fill_query_config_i03t &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_i03m
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_i03t
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package
</UL>

<P><STRONG><a name="[49b]"></a>fill_query_config_i03m</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, protocol_handle.o(i.fill_query_config_i03m))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fill_query_config_i03m
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config
</UL>

<P><STRONG><a name="[3f3]"></a>fill_query_config_i03t</STRONG> (Thumb, 9322 bytes, Stack size 32 bytes, protocol_handle.o(i.fill_query_config_i03t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fill_query_config_i03t &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_config
</UL>

<P><STRONG><a name="[455]"></a>fill_query_config_sn</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, protocol_handle.o(i.fill_query_config_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fill_query_config_sn &rArr; module_sn_get_by_index &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_by_index
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package
</UL>

<P><STRONG><a name="[454]"></a>fill_query_logger</STRONG> (Thumb, 698 bytes, Stack size 48 bytes, protocol_handle.o(i.fill_query_logger))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fill_query_logger &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package
</UL>

<P><STRONG><a name="[453]"></a>fill_query_status</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, protocol_handle.o(i.fill_query_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fill_query_status &rArr; fill_query_status_i03t &rArr; Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_i03t
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_i03m
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_cell_info
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_cell_alarm
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package
</UL>

<P><STRONG><a name="[49e]"></a>fill_query_status_cell_alarm</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, protocol_handle.o(i.fill_query_status_cell_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fill_query_status_cell_alarm &rArr; i03t_node_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status
</UL>

<P><STRONG><a name="[49d]"></a>fill_query_status_cell_info</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, protocol_handle.o(i.fill_query_status_cell_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fill_query_status_cell_info &rArr; i03t_node_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status
</UL>

<P><STRONG><a name="[49c]"></a>fill_query_status_i03m</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, protocol_handle.o(i.fill_query_status_i03m))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fill_query_status_i03m &rArr; Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status
</UL>

<P><STRONG><a name="[49f]"></a>fill_query_status_i03t</STRONG> (Thumb, 1348 bytes, Stack size 32 bytes, protocol_handle.o(i.fill_query_status_i03t))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fill_query_status_i03t &rArr; Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status
</UL>

<P><STRONG><a name="[4a0]"></a>finfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fs_mapi.o(i.finfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = finfo &rArr; fat_info &rArr; fat_vol_chk
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_info
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_dir
</UL>

<P><STRONG><a name="[2d2]"></a>finit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = finit &rArr; fat_init &rArr; fs_config &rArr; fs_config_nand &rArr; fs_mutex_new &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DriveMount
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
</UL>

<P><STRONG><a name="[2d3]"></a>fmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fmount &rArr; fat_mount &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DriveMount
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
</UL>

<P><STRONG><a name="[6f]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[486]"></a>fs_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_config.o(i.fs_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_config &rArr; fs_config_nand &rArr; fs_mutex_new &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_nand
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[4ad]"></a>fs_config_evr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_mapi.o(i.fs_config_evr))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[3cc]"></a>fs_drive_id</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[4ae]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_rtos_tick_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_get_rtos_tick_freq &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[256]"></a>fs_get_sys_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_get_sys_tick &rArr; osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[255]"></a>fs_get_sys_tick_us</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_config.o(i.fs_get_sys_tick_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[436]"></a>fs_get_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[3c4]"></a>fs_mutex_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_mutex_acquire &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[4b0]"></a>fs_mutex_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_mutex_new &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_nand
</UL>

<P><STRONG><a name="[3c7]"></a>fs_mutex_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_mutex_release &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[258]"></a>fs_nand_feature_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_nftl.o(i.fs_nand_feature_addr))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SetupFeatures
</UL>

<P><STRONG><a name="[259]"></a>fs_nand_feature_param</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_nftl.o(i.fs_nand_feature_param))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SetupFeatures
</UL>

<P><STRONG><a name="[4bc]"></a>fs_nand_setup_layout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_nftl.o(i.fs_nand_setup_layout))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[4af]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[496]"></a>fs_strmatch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_common.o(i.fs_strmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fs_strmatch &rArr; fs_strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[497]"></a>fs_strncasecmp</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, fs_common.o(i.fs_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[494]"></a>fs_strpos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[489]"></a>fsj_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fs_journal.o(i.fsj_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fsj_init &rArr; CheckJourn &rArr; CheckJSect
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJourn
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
</UL>

<P><STRONG><a name="[4e1]"></a>fsj_set_space</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_journal.o(i.fsj_set_space))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
</UL>

<P><STRONG><a name="[42c]"></a>fsj_write</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, fs_journal.o(i.fsj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[4b4]"></a>ftl_DevCtrl</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fs_nftl.o(i.ftl_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = ftl_DevCtrl &rArr; ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_DevCtrl
</UL>

<P><STRONG><a name="[4b5]"></a>ftl_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_nftl.o(i.ftl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_resources
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_DevCtrl
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_Init
</UL>

<P><STRONG><a name="[513]"></a>ftl_ReadInfo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_nftl.o(i.ftl_ReadInfo))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_RdInfo
</UL>

<P><STRONG><a name="[4ba]"></a>ftl_ReadSect</STRONG> (Thumb, 526 bytes, Stack size 72 bytes, fs_nftl.o(i.ftl_ReadSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = ftl_ReadSect &rArr; SearchBTT &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_RdSect
</UL>

<P><STRONG><a name="[514]"></a>ftl_UnInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fs_nftl.o(i.ftl_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftl_UnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_UnInit
</UL>

<P><STRONG><a name="[4bb]"></a>ftl_WriteSect</STRONG> (Thumb, 854 bytes, Stack size 136 bytes, fs_nftl.o(i.ftl_WriteSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = ftl_WriteSect &rArr; SearchBTT &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLSN
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand0_WrSect
</UL>

<P><STRONG><a name="[4bd]"></a>get_filename</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, logger.o(i.get_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_filename &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
</UL>

<P><STRONG><a name="[3e7]"></a>get_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[24d]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJSect
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[4be]"></a>i03t_comm_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, de_protocol.o(i.i03t_comm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i03t_comm_init &rArr; osMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
</UL>

<P><STRONG><a name="[3f4]"></a>i03t_module_config</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, de_protocol.o(i.i03t_module_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = i03t_module_config &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_package
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_config_time
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_config
</UL>

<P><STRONG><a name="[44a]"></a>i03t_module_config_response_handle</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, de_protocol.o(i.i03t_module_config_response_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = i03t_module_config_response_handle &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_process
</UL>

<P><STRONG><a name="[3f6]"></a>i03t_module_control</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, de_protocol.o(i.i03t_module_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = i03t_module_control &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_package
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_reset
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_intres_sample
</UL>

<P><STRONG><a name="[449]"></a>i03t_module_control_response_handle</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, de_protocol.o(i.i03t_module_control_response_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = i03t_module_control_response_handle &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_process
</UL>

<P><STRONG><a name="[3f0]"></a>i03t_module_query</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, de_protocol.o(i.i03t_module_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = i03t_module_query &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_package
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_status_data
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_sn
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_paradata
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_cell_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_cell_alarmdata
</UL>

<P><STRONG><a name="[44b]"></a>i03t_module_query_config_response_handle</STRONG> (Thumb, 4192 bytes, Stack size 176 bytes, de_protocol.o(i.i03t_module_query_config_response_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = i03t_module_query_config_response_handle &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_process
</UL>

<P><STRONG><a name="[448]"></a>i03t_module_query_status_response_handle</STRONG> (Thumb, 1184 bytes, Stack size 72 bytes, de_protocol.o(i.i03t_module_query_status_response_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = i03t_module_query_status_response_handle &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_get_status
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_process
</UL>

<P><STRONG><a name="[3fe]"></a>i03t_module_request_upgrade</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, de_protocol.o(i.i03t_module_request_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = i03t_module_request_upgrade &rArr; protocol_send_bytes &rArr; debug_sendbytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_package
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_upgrade
</UL>

<P><STRONG><a name="[4c2]"></a>i03t_module_response_flush</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, de_protocol.o(i.i03t_module_response_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
</UL>

<P><STRONG><a name="[4c0]"></a>i03t_module_send_and_response</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, de_protocol.o(i.i03t_module_send_and_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_response_flush
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_comm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config
</UL>

<P><STRONG><a name="[4c4]"></a>i03t_node_add</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, i03t_node.o(i.i03t_node_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i03t_node_add &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_load
</UL>

<P><STRONG><a name="[422]"></a>i03t_node_add_addr</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, i03t_node.o(i.i03t_node_add_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = i03t_node_add_addr &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_load
</UL>

<P><STRONG><a name="[1d1]"></a>i03t_node_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i03t_node.o(i.i03t_node_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i03t_node_find
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_i03t
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_cell_info
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status_cell_alarm
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_status
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_logger
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_sn
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_control
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogueData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_system_format
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_check
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_store_cb
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexUpdata
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add_addr
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soh_dec_handle
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge_store_process
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_store_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_set_soc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_real
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_status_response_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load_all
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_regs_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_reg_handler
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03t_rw_reg_value
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03t_rw_reg_value
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03t_ro_reg_value
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellDiagram
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellArlamCount
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryDiagram
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmDiagram
</UL>

<P><STRONG><a name="[4c5]"></a>i03t_node_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i03t_node.o(i.i03t_node_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i03t_node_init &rArr; osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_load
</UL>

<P><STRONG><a name="[4c6]"></a>i03t_node_load</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, i03t_node.o(i.i03t_node_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = i03t_node_load &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_init
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_update
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add_addr
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[412]"></a>i03t_node_remove_addr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, i03t_node.o(i.i03t_node_remove_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i03t_node_remove_addr &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
</UL>

<P><STRONG><a name="[415]"></a>i03t_node_update</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, i03t_node.o(i.i03t_node_update))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_load
</UL>

<P><STRONG><a name="[4e2]"></a>logger_get_reboot</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, logger.o(i.logger_get_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = logger_get_reboot &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
</UL>

<P><STRONG><a name="[4e3]"></a>logger_get_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, logger.o(i.logger_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = logger_get_time &rArr; Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
</UL>

<P><STRONG><a name="[45f]"></a>logger_infor_load</STRONG> (Thumb, 354 bytes, Stack size 184 bytes, logger.o(i.logger_infor_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = logger_infor_load &rArr; logger_print_reboot_reason &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_print_reboot_reason
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_logger
</UL>

<P><STRONG><a name="[2c6]"></a>logger_infor_save</STRONG> (Thumb, 162 bytes, Stack size 168 bytes, logger.o(i.logger_infor_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_get_time
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
</UL>

<P><STRONG><a name="[405]"></a>logger_infor_save_file</STRONG> (Thumb, 90 bytes, Stack size 144 bytes, module_log.o(i.logger_infor_save_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = logger_infor_save_file &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filename
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_set_reset_reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_sn_synch_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
</UL>

<P><STRONG><a name="[2d5]"></a>logger_infor_save_more</STRONG> (Thumb, 80 bytes, Stack size 248 bytes, logger.o(i.logger_infor_save_more))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filename
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
</UL>

<P><STRONG><a name="[4e4]"></a>logger_print_reboot_reason</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, logger.o(i.logger_print_reboot_reason))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = logger_print_reboot_reason &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_load
</UL>

<P><STRONG><a name="[4e5]"></a>logger_set_reset_reg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, logger.o(i.logger_set_reset_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = logger_set_reset_reg &rArr; logger_infor_save_file &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[30b]"></a>look1_binlxpw</STRONG> (Thumb, 492 bytes, Stack size 72 bytes, app_soc.o(i.look1_binlxpw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = look1_binlxpw &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
</UL>

<P><STRONG><a name="[14b]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[460]"></a>memory_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_mem.o(i.memory_info))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_mem_infor
</UL>

<P><STRONG><a name="[4e9]"></a>modbus_crc16_check</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, de_modbus_protocol.o(i.modbus_crc16_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = modbus_crc16_check &rArr; CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCRCModBus2
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_handler
</UL>

<P><STRONG><a name="[4ea]"></a>modbus_crc16_check_conti_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, de_modbus_protocol.o(i.modbus_crc16_check_conti_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = modbus_crc16_check_conti_write &rArr; CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCRCModBus2
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_handler
</UL>

<P><STRONG><a name="[4eb]"></a>modbus_get_i03m_ro_reg_value</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, de_modbus_protocol.o(i.modbus_get_i03m_ro_reg_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = modbus_get_i03m_ro_reg_value &rArr; Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ro_regs_handler
</UL>

<P><STRONG><a name="[4ec]"></a>modbus_get_i03m_rw_reg_value</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, de_modbus_protocol.o(i.modbus_get_i03m_rw_reg_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = modbus_get_i03m_rw_reg_value &rArr; Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_rw_regs_handler
</UL>

<P><STRONG><a name="[4ed]"></a>modbus_get_i03t_ro_reg_value</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, de_modbus_protocol.o(i.modbus_get_i03t_ro_reg_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = modbus_get_i03t_ro_reg_value &rArr; i03t_node_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ro_regs_handler
</UL>

<P><STRONG><a name="[4ee]"></a>modbus_get_i03t_rw_reg_value</STRONG> (Thumb, 4722 bytes, Stack size 32 bytes, de_modbus_protocol.o(i.modbus_get_i03t_rw_reg_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = modbus_get_i03t_rw_reg_value &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_rw_regs_handler
</UL>

<P><STRONG><a name="[4ef]"></a>modbus_handler</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, de_modbus_protocol.o(i.modbus_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = modbus_handler &rArr; modbus_response_err &rArr; modbus_response_package &rArr; CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_err
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_protocol_send_bytes
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16_check_conti_write
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process
</UL>

<P><STRONG><a name="[4f0]"></a>modbus_protocol_send_bytes</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, de_modbus_protocol.o(i.modbus_protocol_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = modbus_protocol_send_bytes &rArr; debug_sendbytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendbytes
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_SendBytes
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_SendBytes
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_SendBytes
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_handler
</UL>

<P><STRONG><a name="[c5]"></a>modbus_read_ro_regs_handler</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, de_modbus_protocol.o(i.modbus_read_ro_regs_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = modbus_read_ro_regs_handler &rArr; modbus_response_err &rArr; modbus_response_package &rArr; CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package_fun_03_04
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_err
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03t_ro_reg_value
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03m_ro_reg_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> de_modbus_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>modbus_read_rw_regs_handler</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, de_modbus_protocol.o(i.modbus_read_rw_regs_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = modbus_read_rw_regs_handler &rArr; modbus_get_i03m_rw_reg_value &rArr; Bsp_RtcGetTime &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package_fun_03_04
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_err
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03t_rw_reg_value
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03m_rw_reg_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> de_modbus_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[4f1]"></a>modbus_response_err</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, de_modbus_protocol.o(i.modbus_response_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = modbus_response_err &rArr; modbus_response_package &rArr; CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_regs_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_reg_handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_rw_regs_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ro_regs_handler
</UL>

<P><STRONG><a name="[4f3]"></a>modbus_response_package</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, de_modbus_protocol.o(i.modbus_response_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = modbus_response_package &rArr; CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCRCModBus2
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_regs_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_reg_handler
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_err
</UL>

<P><STRONG><a name="[4f2]"></a>modbus_response_package_fun_03_04</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, de_modbus_protocol.o(i.modbus_response_package_fun_03_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = modbus_response_package_fun_03_04 &rArr; CheckCRCModBus2 &rArr; CalcCRCModBus
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCRCModBus2
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_rw_regs_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ro_regs_handler
</UL>

<P><STRONG><a name="[4f4]"></a>modbus_set_i03m_rw_reg_value</STRONG> (Thumb, 600 bytes, Stack size 32 bytes, de_modbus_protocol.o(i.modbus_set_i03m_rw_reg_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = modbus_set_i03m_rw_reg_value &rArr; logger_infor_save_file &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcSetTime
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_regs_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_reg_handler
</UL>

<P><STRONG><a name="[4f5]"></a>modbus_set_i03t_rw_reg_value</STRONG> (Thumb, 5228 bytes, Stack size 24 bytes, de_modbus_protocol.o(i.modbus_set_i03t_rw_reg_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = modbus_set_i03t_rw_reg_value &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_msg_put
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_regs_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_reg_handler
</UL>

<P><STRONG><a name="[c7]"></a>modbus_write_reg_handler</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, de_modbus_protocol.o(i.modbus_write_reg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = modbus_write_reg_handler &rArr; modbus_set_i03m_rw_reg_value &rArr; logger_infor_save_file &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03t_rw_reg_value
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> de_modbus_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>modbus_write_regs_handler</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, de_modbus_protocol.o(i.modbus_write_regs_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = modbus_write_regs_handler &rArr; modbus_set_i03m_rw_reg_value &rArr; logger_infor_save_file &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03t_rw_reg_value
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_package
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_response_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> de_modbus_protocol.o(.constdata)
</UL>
<P><STRONG><a name="[421]"></a>module_4g_msg_put</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, thread_4g.o(i.module_4g_msg_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = module_4g_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_i03m_token_set
</UL>

<P><STRONG><a name="[419]"></a>module_alarm_copy</STRONG> (Thumb, 2126 bytes, Stack size 176 bytes, module_alarm.o(i.module_alarm_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = module_alarm_copy &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[4f6]"></a>module_alarm_load</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, module_alarm.o(i.module_alarm_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = module_alarm_load &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load_all
</UL>

<P><STRONG><a name="[4f7]"></a>module_alarm_load_protocol</STRONG> (Thumb, 954 bytes, Stack size 104 bytes, module_alarm.o(i.module_alarm_load_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = module_alarm_load_protocol &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package_fill
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[4f8]"></a>module_alarm_store</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, module_alarm.o(i.module_alarm_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = module_alarm_store &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[41b]"></a>module_charge_copy</STRONG> (Thumb, 716 bytes, Stack size 160 bytes, module_discharge.o(i.module_charge_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = module_charge_copy &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[4f9]"></a>module_charge_load</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, module_discharge.o(i.module_charge_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = module_charge_load &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load_all
</UL>

<P><STRONG><a name="[4fa]"></a>module_charge_store</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, module_discharge.o(i.module_charge_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = module_charge_store &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[41a]"></a>module_discharge_copy</STRONG> (Thumb, 720 bytes, Stack size 160 bytes, module_discharge.o(i.module_discharge_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = module_discharge_copy &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[4fb]"></a>module_discharge_load</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, module_discharge.o(i.module_discharge_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = module_discharge_load &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load_all
</UL>

<P><STRONG><a name="[4fc]"></a>module_discharge_load_protocol</STRONG> (Thumb, 754 bytes, Stack size 112 bytes, module_discharge.o(i.module_discharge_load_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = module_discharge_load_protocol &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package_fill
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[4fd]"></a>module_discharge_store</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, module_discharge.o(i.module_discharge_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = module_discharge_store &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[4fe]"></a>module_file_check</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, module_file_storage.o(i.module_file_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = module_file_check &rArr; module_logger_check &rArr; module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_check
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load
</UL>

<P><STRONG><a name="[500]"></a>module_file_create</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, module_file_storage.o(i.module_file_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = module_file_create &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_file_del
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_hist
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_discharge
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_charge
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_alarm
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_check
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_file_flush
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_check
</UL>

<P><STRONG><a name="[502]"></a>module_file_del</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, module_file_storage.o(i.module_file_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = module_file_del &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_test
</UL>

<P><STRONG><a name="[2d7]"></a>module_file_dir</STRONG> (Thumb, 100 bytes, Stack size 312 bytes, module_file_storage.o(i.module_file_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = module_file_dir &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_file_infor
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
</UL>

<P><STRONG><a name="[4ff]"></a>module_file_exist</STRONG> (Thumb, 38 bytes, Stack size 288 bytes, module_file_storage.o(i.module_file_exist))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_file_del
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_hist
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_discharge
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_charge
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_alarm
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_check
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_check
</UL>

<P><STRONG><a name="[503]"></a>module_file_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, module_file_storage.o(i.module_file_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = module_file_init &rArr; InitFileSys &rArr; module_file_dir &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load
</UL>

<P><STRONG><a name="[504]"></a>module_file_load</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, module_file_storage.o(i.module_file_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = module_file_load &rArr; module_file_init &rArr; InitFileSys &rArr; module_file_dir &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_check
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_load
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load_all
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[505]"></a>module_file_load_all</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, module_file_storage.o(i.module_file_load_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = module_file_load_all &rArr; module_hist_load &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load
</UL>

<P><STRONG><a name="[507]"></a>module_file_new</STRONG> (Thumb, 126 bytes, Stack size 304 bytes, module_file_storage.o(i.module_file_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_test
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
</UL>

<P><STRONG><a name="[508]"></a>module_file_system_format</STRONG> (Thumb, 238 bytes, Stack size 184 bytes, module_file_storage.o(i.module_file_system_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = module_file_system_format &rArr; FileIndex_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[509]"></a>module_file_test</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, module_file_storage.o(i.module_file_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = module_file_test &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_del
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[418]"></a>module_hist_copy</STRONG> (Thumb, 948 bytes, Stack size 168 bytes, module_hist.o(i.module_hist_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = module_hist_copy &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[506]"></a>module_hist_load</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, module_hist.o(i.module_hist_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = module_hist_load &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load_all
</UL>

<P><STRONG><a name="[50a]"></a>module_hist_load_protocol</STRONG> (Thumb, 978 bytes, Stack size 104 bytes, module_hist.o(i.module_hist_load_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = module_hist_load_protocol &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_send_bytes
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package_fill
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[50b]"></a>module_hist_store</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, module_hist.o(i.module_hist_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = module_hist_store &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[50c]"></a>module_i03t_del_alarm</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, module_file_storage.o(i.module_i03t_del_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = module_i03t_del_alarm &rArr; module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[50d]"></a>module_i03t_del_charge</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, module_file_storage.o(i.module_i03t_del_charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = module_i03t_del_charge &rArr; module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[50e]"></a>module_i03t_del_discharge</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, module_file_storage.o(i.module_i03t_del_discharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = module_i03t_del_discharge &rArr; module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[50f]"></a>module_i03t_del_hist</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, module_file_storage.o(i.module_i03t_del_hist))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = module_i03t_del_hist &rArr; module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[510]"></a>module_i03t_file_del</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, module_file_storage.o(i.module_i03t_file_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = module_i03t_file_del &rArr; module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[413]"></a>module_i03t_file_flush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, module_file_storage.o(i.module_i03t_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = module_i03t_file_flush &rArr; module_file_create &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
</UL>

<P><STRONG><a name="[501]"></a>module_logger_check</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, module_log.o(i.module_logger_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = module_logger_check &rArr; module_file_exist &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_exist
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_check
</UL>

<P><STRONG><a name="[41f]"></a>module_logger_copy</STRONG> (Thumb, 1722 bytes, Stack size 176 bytes, module_log.o(i.module_logger_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = module_logger_copy &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_get_reboot
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
</UL>

<P><STRONG><a name="[511]"></a>module_logger_store</STRONG> (Thumb, 196 bytes, Stack size 176 bytes, module_log.o(i.module_logger_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = module_logger_store &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
</UL>

<P><STRONG><a name="[423]"></a>module_sn_add</STRONG> (Thumb, 528 bytes, Stack size 88 bytes, module_sn.o(i.module_sn_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = module_sn_add &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
</UL>

<P><STRONG><a name="[443]"></a>module_sn_add_mult</STRONG> (Thumb, 544 bytes, Stack size 96 bytes, module_sn.o(i.module_sn_add_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = module_sn_add_mult &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
</UL>

<P><STRONG><a name="[414]"></a>module_sn_clear</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, module_sn.o(i.module_sn_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = module_sn_clear &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
</UL>

<P><STRONG><a name="[440]"></a>module_sn_delete</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, module_sn.o(i.module_sn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = module_sn_delete &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
</UL>

<P><STRONG><a name="[43f]"></a>module_sn_find</STRONG> (Thumb, 88 bytes, Stack size 88 bytes, module_sn.o(i.module_sn_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = module_sn_find &rArr; storage_readbytes &rArr; Bsp_FlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
</UL>

<P><STRONG><a name="[4c1]"></a>module_sn_get</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, module_sn.o(i.module_sn_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = module_sn_get &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
</UL>

<P><STRONG><a name="[3fc]"></a>module_sn_get_by_index</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, module_sn.o(i.module_sn_get_by_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = module_sn_get_by_index &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_sn
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
</UL>

<P><STRONG><a name="[416]"></a>module_sn_get_count</STRONG> (Thumb, 474 bytes, Stack size 184 bytes, module_sn.o(i.module_sn_get_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = module_sn_get_count &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_readbytes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_clear_i03t
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_sn
</UL>

<P><STRONG><a name="[441]"></a>module_sn_replace</STRONG> (Thumb, 394 bytes, Stack size 96 bytes, module_sn.o(i.module_sn_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_new
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_writebytes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Get32
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearerr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
</UL>

<P><STRONG><a name="[45e]"></a>module_sn_test</STRONG> (Thumb, 288 bytes, Stack size 96 bytes, module_sn.o(i.module_sn_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = module_sn_test &rArr; module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_erasesector
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_add_sn
</UL>

<P><STRONG><a name="[315]"></a>nand_DrvEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_nand_media.o(i.nand_DrvEvent))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND0_HW_SignalEventHandler
</UL>

<P><STRONG><a name="[316]"></a>nand_MediaEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_nftl.o(i.nand_MediaEvent))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND0_Media_SignalEventHandler
</UL>

<P><STRONG><a name="[203]"></a>osDelay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_delay.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_cpustat_process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beeps
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_sn_synch_process
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_generate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_thread
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_3_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_2_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_1_process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_rx_process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpustat_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_SendBytes
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_SendBytes
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_SendBytes
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_SendBytes
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFileSys
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[519]"></a>osKernelGetState</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[4b2]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>

<P><STRONG><a name="[4b3]"></a>osKernelGetSysTimerFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetSysTimerFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetSysTimerFreq &rArr; svcRtxKernelGetSysTimerFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
</UL>

<P><STRONG><a name="[33d]"></a>osKernelGetTickCount</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetTickCount &rArr; svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_sn_cloud_id_set
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_sn_synch_process
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge_store_process
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_store_process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_debug_thread
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_3_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_2_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_1_process
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_rx_process
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
</UL>

<P><STRONG><a name="[39e]"></a>osKernelGetTickFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MsToTick
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
</UL>

<P><STRONG><a name="[3df]"></a>osKernelInitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[4e8]"></a>osKernelStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_kernel.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c3]"></a>osMessageQueueGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_master_process
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_response_flush
</UL>

<P><STRONG><a name="[4bf]"></a>osMessageQueueNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osMessageQueueNew
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_init
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_comm_init
</UL>

<P><STRONG><a name="[30f]"></a>osMessageQueuePut</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_process
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_4g_msg_put
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_msg_put
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_msg_put
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_master_msg_put
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_status_response_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control_response_handle
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config_response_handle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[39f]"></a>osMutexAcquire</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexAcquire
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
</UL>

<P><STRONG><a name="[3a1]"></a>osMutexDelete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexDelete
</UL>

<P><STRONG><a name="[3a0]"></a>osMutexNew</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexCreate
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>

<P><STRONG><a name="[3a2]"></a>osMutexRelease</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mutex.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexRelease
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
</UL>

<P><STRONG><a name="[52e]"></a>osRtxErrorNotify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[86]"></a>osRtxIdleThread</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.osRtxIdleThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxIdleThread &rArr; feed_watchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feed_watchdog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[3db]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_kernel.o(i.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[51d]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(i.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[52f]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtx_memory.o(i.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[532]"></a>osRtxMemoryFree</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[534]"></a>osRtxMemoryInit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtx_memory.o(i.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[4cd]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_get
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_inc32
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[539]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(i.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_link_put
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_rtx_mempool_c_7914b4c7__atomic_dec32
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[53c]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mempool.o(i.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[543]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_msgqueue.o(i.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[544]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_mutex.o(i.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[547]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtx_mutex.o(i.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[156]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rtx_system.o(i.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4c9]"></a>osRtxPostProcess</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[54d]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[549]"></a>osRtxThreadDispatch</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[53f]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[562]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rtx_thread.o(i.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[558]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
</UL>

<P><STRONG><a name="[548]"></a>osRtxThreadListSort</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[559]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[541]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[5b4]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[564]"></a>osRtxThreadStartup</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[55f]"></a>osRtxThreadSwitch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[566]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[540]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[157]"></a>osRtxTick_Handler</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, rtx_system.o(i.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[107]"></a>osRtxTimerSetup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_timer.o(i.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[106]"></a>osRtxTimerThread</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_timer.o(i.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[221]"></a>osSemaphoreAcquire</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rtx_semaphore.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSemaphoreAcquire &rArr; SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_remove_addr
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add_addr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendbytes
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_SendBytes
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_SendBytes
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_SendBytes
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_SendBytes
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
</UL>

<P><STRONG><a name="[3a8]"></a>osSemaphoreDelete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osSemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreDelete
</UL>

<P><STRONG><a name="[21d]"></a>osSemaphoreNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_semaphore.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNew
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_Init
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_Init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_debug_init
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_heap_init
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreCreate
</UL>

<P><STRONG><a name="[222]"></a>osSemaphoreRelease</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_remove_addr
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add_addr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendbytes
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_SendBytes
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_SendBytes
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_SendBytes
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_SendBytes
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
</UL>

<P><STRONG><a name="[462]"></a>osThreadEnumerate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadEnumerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadEnumerate
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadEnumerate
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
</UL>

<P><STRONG><a name="[9e]"></a>osThreadExit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_thread.o(i.osThreadExit))
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[3aa]"></a>osThreadFlagsSet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
</UL>

<P><STRONG><a name="[3ab]"></a>osThreadFlagsWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtx_thread.o(i.osThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadFlagsWait
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWait
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
</UL>

<P><STRONG><a name="[461]"></a>osThreadGetCount</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_thread.o(i.osThreadGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
</UL>

<P><STRONG><a name="[2c4]"></a>osThreadGetId</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(i.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
</UL>

<P><STRONG><a name="[465]"></a>osThreadGetName</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
</UL>

<P><STRONG><a name="[464]"></a>osThreadGetPriority</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadGetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadGetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
</UL>

<P><STRONG><a name="[463]"></a>osThreadGetStackSpace</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadGetStackSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadGetStackSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
</UL>

<P><STRONG><a name="[3a9]"></a>osThreadNew</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_thread.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_init
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_init
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_3_init
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_2_init
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_1_init
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_debug_init
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_cpustat_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_init
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadCreate
</UL>

<P><STRONG><a name="[427]"></a>osThreadResume</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadResume
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadResume
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
</UL>

<P><STRONG><a name="[426]"></a>osThreadSuspend</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspend
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
</UL>

<P><STRONG><a name="[3ac]"></a>osThreadTerminate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadTerminate
</UL>

<P><STRONG><a name="[3ae]"></a>osTimerDelete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_timer.o(i.osTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDelete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerDelete
</UL>

<P><STRONG><a name="[3ad]"></a>osTimerNew</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_timer.o(i.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check_init
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerCreate
</UL>

<P><STRONG><a name="[3af]"></a>osTimerStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rtx_timer.o(i.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
</UL>

<P><STRONG><a name="[44e]"></a>protocol_handle_config</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, protocol_handle.o(i.protocol_handle_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = protocol_handle_config &rArr; de_protocol_handle_config &rArr; module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
</UL>

<P><STRONG><a name="[44d]"></a>protocol_handle_control</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, protocol_handle.o(i.protocol_handle_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = protocol_handle_control &rArr; de_protocol_handle_control &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_control
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
</UL>

<P><STRONG><a name="[450]"></a>protocol_handle_upgrade</STRONG> (Thumb, 410 bytes, Stack size 72 bytes, protocol_handle.o(i.protocol_handle_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = protocol_handle_upgrade &rArr; IAP_Process &rArr; IAP_FlashCheck &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Process
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_GetPackSize
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
</UL>

<P><STRONG><a name="[58e]"></a>protocol_master_msg_put</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, thread_comm_i03t.o(i.protocol_master_msg_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = protocol_master_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_rx_process
</UL>

<P><STRONG><a name="[58f]"></a>protocol_msg_put</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, thread_protocol_process.o(i.protocol_msg_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = protocol_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_3_process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_2_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_485_1_process
</UL>

<P><STRONG><a name="[451]"></a>protocol_send_bytes</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, de_protocol.o(i.protocol_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = protocol_send_bytes &rArr; debug_sendbytes &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendbytes
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_4_SendBytes
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_3_SendBytes
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_2_SendBytes
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rs485_1_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_request_upgrade
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
</UL>

<P><STRONG><a name="[44c]"></a>protocol_set_query_start_cell_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_handle.o(i.protocol_set_query_start_cell_id))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
</UL>

<P><STRONG><a name="[329]"></a>rt_powd_snf</STRONG> (Thumb, 542 bytes, Stack size 56 bytes, app_soc.o(i.rt_powd_snf))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_powd_snf &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtIsNaN
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtIsInf
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
</UL>

<P><STRONG><a name="[3e8]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_common.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[332]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuf
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[442]"></a>soc_msg_put</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thread_soc.o(i.soc_msg_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = soc_msg_put &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03t_rw_reg_value
</UL>

<P><STRONG><a name="[29f]"></a>soh_dec_handle</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread_soc.o(i.soh_dec_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = soh_dec_handle &rArr; storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[3bf]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sqrt &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c3]"></a>stack_dump</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.stack_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = stack_dump &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_sendstring
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[274]"></a>storage_erasesector</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, storage.o(i.storage_erasesector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = storage_erasesector &rArr; Bsp_FlashEraseSector &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashEraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_test
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_EraseAppBack
</UL>

<P><STRONG><a name="[400]"></a>storage_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, storage.o(i.storage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = storage_init
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
</UL>

<P><STRONG><a name="[42e]"></a>storage_msg_put</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, thread_storage.o(i.storage_msg_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = storage_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_malloc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_logger
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_control
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_process
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_store_cb
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soh_dec_handle
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge_store_process
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_store_process
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_discharge
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_alarm
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_generate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_format
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_flush
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_process
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_regs_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_reg_handler
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03t_rw_reg_value
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_set_i03m_rw_reg_value
</UL>

<P><STRONG><a name="[272]"></a>storage_readbytes</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, storage.o(i.storage_readbytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = storage_readbytes &rArr; Bsp_FlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_find
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashCheck
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_sn
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_load
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_by_index
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_load
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_load
</UL>

<P><STRONG><a name="[275]"></a>storage_writebytes</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, storage.o(i.storage_writebytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_FlashProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Process
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndex_save
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
</UL>

<P><STRONG><a name="[2c8]"></a>sys_free</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sys_mem.o(i.sys_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_free &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_upgrade
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_sn
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_process
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_process
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_4g_msg_put
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Deinit
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_by_index
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_request_upgrade
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_config_time
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_upgrade
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_config
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_msg_put
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_master_process
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_master_msg_put
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_send_and_response
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_response_flush
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_status_response_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control_response_handle
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config_response_handle
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_rw_regs_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ro_regs_handler
</UL>

<P><STRONG><a name="[2cb]"></a>sys_malloc</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, sys_mem.o(i.sys_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_replace
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_delete
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add_mult
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_handle_upgrade
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_add
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_handler
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_add
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_copy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_copy
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_copy
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_copy
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_copy
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_4g_msg_put
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_FlashCheck
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_by_index
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_request_upgrade
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_config_time
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_upgrade
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_synch_sn
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_config
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_get_task_infor
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_msg_put
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_master_msg_put
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_status_response_handle
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_control_response_handle
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_config_response_handle
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_load
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_rw_regs_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ro_regs_handler
</UL>

<P><STRONG><a name="[5c1]"></a>system_heap_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sys_mem.o(i.system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = system_heap_init &rArr; osSemaphoreNew
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[a9]"></a>thread_485_1_process</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, thread_rs485_1.o(i.thread_485_1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = thread_485_1_process &rArr; Module4G_Handle &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_msg_put
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_rs485_1.o(i.thread_rs485_1_init)
</UL>
<P><STRONG><a name="[aa]"></a>thread_485_2_process</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, thread_rs485_2.o(i.thread_485_2_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = thread_485_2_process &rArr; Module4G_Handle &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_msg_put
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_rs485_2.o(i.thread_rs485_2_init)
</UL>
<P><STRONG><a name="[ab]"></a>thread_485_3_process</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, thread_rs485_3.o(i.thread_485_3_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = thread_485_3_process &rArr; Module4G_Handle &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_msg_put
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module4G_Handle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_rs485_3.o(i.thread_rs485_3_init)
</UL>
<P><STRONG><a name="[5c2]"></a>thread_comm_i03t_init</STRONG> (Thumb, 130 bytes, Stack size 112 bytes, thread_comm_i03t.o(i.thread_comm_i03t_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = thread_comm_i03t_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[a0]"></a>thread_comm_i03t_process</STRONG> (Thumb, 942 bytes, Stack size 16 bytes, thread_comm_i03t.o(i.thread_comm_i03t_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = thread_comm_i03t_process &rArr; appl_i03t_sn_synch_process &rArr; appl_comm_i03t_request_synch_sn &rArr; i03t_module_config &rArr; i03t_module_send_and_response &rArr; i03t_module_response_flush &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_sn_synch_process
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_reset
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_intres_sample
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_i03t_config_time
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_status_data
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_sn
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_reset
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_paradata
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_config
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_cell_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_comm_i03t_request_cell_alarmdata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_comm_i03t.o(i.thread_comm_i03t_init)
</UL>
<P><STRONG><a name="[a1]"></a>thread_comm_i03t_rx_process</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, thread_comm_i03t.o(i.thread_comm_i03t_rx_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = thread_comm_i03t_rx_process &rArr; protocol_master_msg_put &rArr; sys_malloc &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_check
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_master_msg_put
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_comm_i03t.o(i.thread_comm_i03t_init)
</UL>
<P><STRONG><a name="[5c3]"></a>thread_command_init</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, thread_command.o(i.thread_command_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_command_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[a3]"></a>thread_command_process</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, thread_command.o(i.thread_command_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = thread_command_process &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedRunningToggle
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedRunningOff
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedErrorToggle
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedErrorOn
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedErrorOff
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedCommuToggle
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_LedCommuOff
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_command.o(i.thread_command_init)
</UL>
<P><STRONG><a name="[5c5]"></a>thread_cpustat_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_cpustat.o(i.thread_cpustat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_cpustat_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[a4]"></a>thread_cpustat_process</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, thread_cpustat.o(i.thread_cpustat_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thread_cpustat_process &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_cpustat.o(i.thread_cpustat_init)
</UL>
<P><STRONG><a name="[5c6]"></a>thread_debug_init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, thread_debug.o(i.thread_debug_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = thread_debug_init &rArr; MX_USART4_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[76]"></a>thread_init_process</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, threads_init.o(i.thread_init_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = thread_init_process &rArr; module_file_load &rArr; module_file_init &rArr; InitFileSys &rArr; module_file_dir &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_get_count
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_hardware_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_software_init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_alarm_check_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_usbh_init
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_storage_init
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_init
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_3_init
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_2_init
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_rs485_1_init
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_protocol_process_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_lcd_init
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_key_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_debug_init
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_cpustat_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_command_init
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_comm_i03t_init
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_heap_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_load
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_load
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_load
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_about
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpustat_init
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_noinit_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5ce]"></a>thread_key_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_key.o(i.thread_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_key_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[a6]"></a>thread_key_process</STRONG> (Thumb, 786 bytes, Stack size 8 bytes, thread_key.o(i.thread_key_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = thread_key_process &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyUp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyRight
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLeft
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEnsur
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDown
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBack
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindI03T
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_KeyInit
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFindTNumber
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinTNumber
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFindTNumber
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_key.o(i.thread_key_init)
</UL>
<P><STRONG><a name="[5d0]"></a>thread_lcd_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_lcd.o(i.thread_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_lcd_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[a7]"></a>thread_lcd_process</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, thread_lcd.o(i.thread_lcd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = thread_lcd_process &rArr; LCD_Init &rArr; MainMenu &rArr; MainMenuInfo &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowT
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowNvgBar
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowCell
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowAlarm
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IniTNumber
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogueData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectBox
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_lcd.o(i.thread_lcd_init)
</UL>
<P><STRONG><a name="[a2]"></a>thread_protocol_master_process</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, thread_comm_i03t.o(i.thread_protocol_master_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = thread_protocol_master_process &rArr; de_protocol_master_process &rArr; i03t_module_query_config_response_handle &rArr; debug_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_comm_i03t.o(i.thread_comm_i03t_init)
</UL>
<P><STRONG><a name="[a8]"></a>thread_protocol_process</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, thread_protocol_process.o(i.thread_protocol_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + Unknown Stack Size
<LI>Call Chain = thread_protocol_process &rArr; de_protocol_process &rArr; protocol_handle_config &rArr; de_protocol_handle_config &rArr; module_sn_replace &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_handler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_process
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_protocol_process.o(i.thread_protocol_process_init)
</UL>
<P><STRONG><a name="[5cd]"></a>thread_protocol_process_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_protocol_process.o(i.thread_protocol_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_protocol_process_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[5c9]"></a>thread_rs485_1_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_rs485_1.o(i.thread_rs485_1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_rs485_1_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[5ca]"></a>thread_rs485_2_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_rs485_2.o(i.thread_rs485_2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_rs485_2_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[5cb]"></a>thread_rs485_3_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_rs485_3.o(i.thread_rs485_3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_rs485_3_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[5cc]"></a>thread_soc_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_soc.o(i.thread_soc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_soc_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[ac]"></a>thread_soc_process</STRONG> (Thumb, 2220 bytes, Stack size 624 bytes, thread_soc.o(i.thread_soc_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = thread_soc_process &rArr; App_soc_process &rArr; SOC_EKF_step &rArr; rt_powd_snf &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_terminate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_RtcGetTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_standby_time
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_intial
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_intial
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge_store_process
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charge_store_process
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_soc.o(i.thread_soc_init)
</UL>
<P><STRONG><a name="[5c8]"></a>thread_storage_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_storage.o(i.thread_storage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_storage_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[ad]"></a>thread_storage_process</STRONG> (Thumb, 1550 bytes, Stack size 136 bytes, thread_storage.o(i.thread_storage_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = thread_storage_process &rArr; appl_usbh_copy_logger &rArr; appl_usbh_sn_cloud_id_set &rArr; module_sn_add &rArr; module_file_new &rArr; logger_infor_save_more &rArr; logger_infor_save &rArr; storage_writebytes &rArr; Bsp_FlashProgram &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_logger_store
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_file_del
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_hist
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_discharge
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_charge
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_del_alarm
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_store
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_hist_load_protocol
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_test
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_system_format
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_check
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_store
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_discharge_load_protocol
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_charge_store
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_store
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_alarm_load_protocol
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_set_reset_reg
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_get_power_flag
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beeps
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileIndexUpdata
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_sn_clear
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_i03t_file_flush
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_msg_put
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade_i03t
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_upgrade
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_copy_logger
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_usbh_check_access
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_save
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_para_factory
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_node_find
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_file
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_dir
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_noinit_store
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_storage.o(i.thread_storage_init)
</UL>
<P><STRONG><a name="[5cf]"></a>thread_usbh_init</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, thread_usbh.o(i.thread_usbh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thread_usbh_init &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_init_process
</UL>

<P><STRONG><a name="[af]"></a>thread_usbh_process</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, thread_usbh.o(i.thread_usbh_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = thread_usbh_process &rArr; USBH_MSC_DriveMount &rArr; fmount &rArr; fat_mount &rArr; fat_jour_init &rArr; j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DriveMount
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DriveGetMediaStatus
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beeps
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_msg_put
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_noinit_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread_usbh.o(i.thread_usbh_init)
</UL>
<P><STRONG><a name="[6b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[302]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[659]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[65a]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[65b]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[65c]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[65d]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1e8]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_query_config_i03t
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_standby_time
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_get_i03t_rw_reg_value
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtIsNaN
</UL>

<P><STRONG><a name="[5d6]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_binlxpw
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_step
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu_f
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[5d9]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5dc]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[5e0]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_standby_time
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_binlxpw
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[5de]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[307]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtIsInf
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu_f
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[5df]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1f5]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[5e1]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
</UL>

<P><STRONG><a name="[5e2]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_standby_time
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[65e]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1ea]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu_f
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu
</UL>

<P><STRONG><a name="[65f]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[2ff]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_binlxpw
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[5e3]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[5e6]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_standby_time
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_binlxpw
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_step
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu_f
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[5e4]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5d8]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[5db]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1eb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[5e5]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[300]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[5e7]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3c2]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[1f9]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_binlxpw
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RandSrc_GZ_D
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Noise_RandSrc_GZ_D
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[5e9]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_handle_config
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMenuInfo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaryInfo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfo
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_standby_time
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soh_process
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_process
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_soc_intial
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_deep_cycle_time
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_soc_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_list_file_index
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i03t_module_query_config_response_handle
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_step
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_initialize
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_initialize
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetNaN
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetMinusInf
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetInf
</UL>

<P><STRONG><a name="[5ea]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[5eb]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[134]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[660]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[661]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[5d7]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[116]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[11a]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[5dd]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[3c1]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5ec]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[337]"></a>SystemClock_Config</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[286]"></a>HAL_FSMC_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bsp_fsmc.o(i.HAL_FSMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NAND_MspInit
</UL>

<P><STRONG><a name="[24b]"></a>CalcCRCModBus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, program.o(i.CalcCRCModBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcCRCModBus
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCRCModBus2
</UL>

<P><STRONG><a name="[43d]"></a>crc8</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, de_protocol.o(i.crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_check
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package_fill
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_slave_package
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_master_package
</UL>

<P><STRONG><a name="[43c]"></a>de_protocol_find_head</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, de_protocol.o(i.de_protocol_find_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = de_protocol_find_head
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;de_protocol_check
</UL>

<P><STRONG><a name="[2d1]"></a>InitFileSys</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, module_file_storage.o(i.InitFileSys))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = InitFileSys &rArr; module_file_dir &rArr; ffind &rArr; fat_ffind &rArr; path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_infor_save_more
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_dir
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fformat
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_file_init
</UL>

<P><STRONG><a name="[9]"></a>ModuleTAS_AutoStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, module_tas.o(i.ModuleTAS_AutoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ModuleTAS_AutoStatus &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_tas.o(.data)
</UL>
<P><STRONG><a name="[306]"></a>Model_sim_genrand_uint32_vector</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, app_soc.o(i.Model_sim_genrand_uint32_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Model_sim_genrand_uint32_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu_f
</UL>

<P><STRONG><a name="[2fe]"></a>Model_simulation_eml_rand_shr3cong</STRONG> (Thumb, 1296 bytes, Stack size 104 bytes, app_soc.o(i.Model_simulation_eml_rand_shr3cong))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Model_simulation_eml_rand_shr3cong &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
</UL>

<P><STRONG><a name="[304]"></a>Model_simulation_genrandu</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_soc.o(i.Model_simulation_genrandu))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Model_simulation_genrandu &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
</UL>

<P><STRONG><a name="[305]"></a>Model_simulation_genrandu_f</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, app_soc.o(i.Model_simulation_genrandu_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Model_simulation_genrandu_f &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_sim_genrand_uint32_vector
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_randn
</UL>

<P><STRONG><a name="[309]"></a>Model_simulation_randn</STRONG> (Thumb, 1366 bytes, Stack size 104 bytes, app_soc.o(i.Model_simulation_randn))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Model_simulation_randn &rArr; Model_simulation_eml_rand_shr3cong &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu_f
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_genrandu
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_eml_rand_shr3cong
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_sim_genrand_uint32_vector
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_simulation_step
</UL>

<P><STRONG><a name="[590]"></a>rtGetInf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_soc.o(i.rtGetInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtGetInf &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetInfF
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN
</UL>

<P><STRONG><a name="[591]"></a>rtGetInfF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_soc.o(i.rtGetInfF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtGetInfF
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetInf
</UL>

<P><STRONG><a name="[592]"></a>rtGetMinusInf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_soc.o(i.rtGetMinusInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtGetMinusInf &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetMinusInfF
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN
</UL>

<P><STRONG><a name="[593]"></a>rtGetMinusInfF</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_soc.o(i.rtGetMinusInfF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtGetMinusInfF
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetMinusInf
</UL>

<P><STRONG><a name="[594]"></a>rtGetNaN</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_soc.o(i.rtGetNaN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtGetNaN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetNaNF
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN
</UL>

<P><STRONG><a name="[595]"></a>rtGetNaNF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_soc.o(i.rtGetNaNF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtGetNaNF
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_InitInfAndNaN
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetNaN
</UL>

<P><STRONG><a name="[596]"></a>rtIsInf</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_soc.o(i.rtIsInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtIsInf &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
</UL>

<P><STRONG><a name="[597]"></a>rtIsNaN</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_soc.o(i.rtIsNaN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtIsNaN &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtIsNaNF
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_powd_snf
</UL>

<P><STRONG><a name="[598]"></a>rtIsNaNF</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_soc.o(i.rtIsNaNF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtIsNaNF
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtIsNaN
</UL>

<P><STRONG><a name="[328]"></a>rt_InitInfAndNaN</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_soc.o(i.rt_InitInfAndNaN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_InitInfAndNaN &rArr; rtGetNaN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetNaNF
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetNaN
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetMinusInfF
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetMinusInf
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetInfF
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtGetInf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOC_EKF_initialize
</UL>

<P><STRONG><a name="[5c0]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, sys_mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_free
</UL>

<P><STRONG><a name="[516]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_delay.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[517]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_delay.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[77]"></a>svcRtxDelay</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_delay.o(i.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(i.osDelay)
</UL>
<P><STRONG><a name="[51a]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[51b]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[51c]"></a>IsPrivileged</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_kernel.o(i.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[5a8]"></a>__set_CONTROL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtx_kernel.o(i.__set_CONTROL))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[78]"></a>svcRtxKernelGetState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetState)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxKernelGetSysTimerCount</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_kernel.o(i.svcRtxKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetSysTimerCount)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxKernelGetSysTimerFreq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetSysTimerFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetSysTimerFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetClock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetSysTimerFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetSysTimerFreq)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 528 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxKernelStart</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, rtx_kernel.o(i.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_CONTROL
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[3da]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[531]"></a>MemBlockPtr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_memory.o(i.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[522]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[523]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[2f9]"></a>MessageQueueGet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_dec32_nz
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_wr8
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2fc]"></a>MessageQueuePut</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_msgqueue.o(i.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___14_rtx_msgqueue_c_a86a7a93__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[53e]"></a>MessageQueueRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_msgqueue.o(i.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[4c7]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = isrRtxMessageQueueGet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[4cc]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[9c]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, rtx_msgqueue.o(i.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueGet)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, rtx_msgqueue.o(i.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueueNew)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, rtx_msgqueue.o(i.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(i.osMessageQueuePut)
</UL>
<P><STRONG><a name="[527]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_mutex.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[528]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_mutex.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[82]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexAcquire)
</UL>
<P><STRONG><a name="[83]"></a>svcRtxMutexDelete</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexDelete)
</UL>
<P><STRONG><a name="[84]"></a>svcRtxMutexNew</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rtx_mutex.o(i.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexNew)
</UL>
<P><STRONG><a name="[85]"></a>svcRtxMutexRelease</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, rtx_mutex.o(i.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(i.osMutexRelease)
</UL>
<P><STRONG><a name="[56f]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[570]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_semaphore.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[32d]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenDecrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenDecrement
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_dec16_nz
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[32f]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtx_semaphore.o(i.SemaphoreTokenIncrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SemaphoreTokenIncrement
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_rtx_semaphore_c_c705bb47__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[4d0]"></a>isrRtxSemaphoreRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_semaphore.o(i.isrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[9d]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_semaphore.o(i.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[88]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreNotAcquired
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[89]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, rtx_semaphore.o(i.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreDestroyed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[8a]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rtx_semaphore.o(i.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreNew)
</UL>
<P><STRONG><a name="[8b]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_semaphore.o(i.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreReleased
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[4d6]"></a>isr_queue_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_system.o(i.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_dec16_nz
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[4d9]"></a>isr_queue_put</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtx_system.o(i.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lim
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_system_c_024f2f18__atomic_inc16_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[575]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[576]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[338]"></a>ThreadFlagsCheck</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_thread.o(i.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_any
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_chk32_all
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[33b]"></a>ThreadFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_thread.o(i.ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ThreadFlagsSet
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_rtx_thread_c_add96be5__atomic_set32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxThreadFlagsSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
</UL>

<P><STRONG><a name="[4d3]"></a>isrRtxThreadFlagsSet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rtx_thread.o(i.isrRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[55d]"></a>osRtxKernelGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[54b]"></a>osRtxThreadBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rtx_thread.o(i.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[568]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[569]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
</UL>

<P><STRONG><a name="[55a]"></a>osRtxThreadDestroy</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[55b]"></a>osRtxThreadFree</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[55e]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadEnumerate
</UL>

<P><STRONG><a name="[560]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(i.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[550]"></a>osRtxThreadListRoot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[9f]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(i.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[5b5]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[8c]"></a>svcRtxThreadEnumerate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadEnumerate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxThreadEnumerate
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadEnumerate
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadEnumerate)
</UL>
<P><STRONG><a name="[8d]"></a>svcRtxThreadExit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[8e]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsSet
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsSetDone
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[8f]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsWait &rArr; ThreadFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitPending
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitNotCompleted
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsError
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[90]"></a>svcRtxThreadGetCount</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxThreadGetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetCount)
</UL>
<P><STRONG><a name="[91]"></a>svcRtxThreadGetId</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_thread.o(i.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetId)
</UL>
<P><STRONG><a name="[92]"></a>svcRtxThreadGetName</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxThreadGetName
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetName)
</UL>
<P><STRONG><a name="[93]"></a>svcRtxThreadGetPriority</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadGetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxThreadGetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetPriority)
</UL>
<P><STRONG><a name="[94]"></a>svcRtxThreadGetStackSpace</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadGetStackSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxThreadGetStackSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetStackSpace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadGetStackSpace)
</UL>
<P><STRONG><a name="[95]"></a>svcRtxThreadNew</STRONG> (Thumb, 618 bytes, Stack size 56 bytes, rtx_thread.o(i.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadNew)
</UL>
<P><STRONG><a name="[96]"></a>svcRtxThreadResume</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(i.svcRtxThreadResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxThreadResume &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadResumed
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadResume)
</UL>
<P><STRONG><a name="[97]"></a>svcRtxThreadSuspend</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxThreadSuspend &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspended
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadSuspend)
</UL>
<P><STRONG><a name="[98]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, rtx_thread.o(i.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(i.osThreadTerminate)
</UL>
<P><STRONG><a name="[585]"></a>IsException</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_timer.o(i.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[586]"></a>IsIrqMasked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_timer.o(i.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[56d]"></a>TimerInsert</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rtx_timer.o(i.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[5bc]"></a>TimerRemove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[56b]"></a>TimerUnlink</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_timer.o(i.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[56c]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_timer.o(i.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[87]"></a>osRtxTimerTick</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rtx_timer.o(i.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[99]"></a>svcRtxTimerDelete</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_timer.o(i.svcRtxTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxTimerDelete &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerDestroyed
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerDelete)
</UL>
<P><STRONG><a name="[9a]"></a>svcRtxTimerNew</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, rtx_timer.o(i.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerNew)
</UL>
<P><STRONG><a name="[9b]"></a>svcRtxTimerStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rtx_timer.o(i.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(i.osTimerStart)
</UL>
<P><STRONG><a name="[d7]"></a>AbortSequence</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.AbortSequence))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>ChipEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.ChipEnable))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>Control</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, nand_membus.o(i.Control))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>DevicePower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.DevicePower))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>ExecuteSequence</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, nand_membus.o(i.ExecuteSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ExecuteSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nand_membus.o(i.GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>GetDeviceBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.GetDeviceBusy))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>GetStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nand_membus.o(i.GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nand_membus.o(i.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>Initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nand_membus.o(i.Initialize))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>InquireECC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.InquireECC))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>PowerControl</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nand_membus.o(i.PowerControl))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>ReadData</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, nand_membus.o(i.ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>SendAddress</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nand_membus.o(i.SendAddress))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>SendCommand</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nand_membus.o(i.SendCommand))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nand_membus.o(i.Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>WriteData</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, nand_membus.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>WriteProtect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nand_membus.o(i.WriteProtect))
<BR>[Address Reference Count : 1]<UL><LI> nand_membus.o(.constdata)
</UL>
<P><STRONG><a name="[320]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, otg_fs_stm32f4xx.o(i.Enable_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
</UL>

<P><STRONG><a name="[342]"></a>USBH_CH_Disable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_CH_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_CH_Disable &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferAbort
</UL>

<P><STRONG><a name="[37b]"></a>USBH_CH_GetIndexFromAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(i.USBH_CH_GetIndexFromAddress))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferGetResult
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferAbort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransfer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeModify
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>

<P><STRONG><a name="[dc]"></a>USBH_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(i.USBH_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>USBH_GetFrameNumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(i.USBH_GetFrameNumber))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>USBH_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(i.USBH_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[378]"></a>USBH_HW_StartTransfer</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, usbh_fs_stm32f4xx.o(i.USBH_HW_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FS_IRQ
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransfer
</UL>

<P><STRONG><a name="[dd]"></a>USBH_Initialize</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_Initialize &rArr; OTG_FS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>USBH_PipeCreate</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, usbh_fs_stm32f4xx.o(i.USBH_PipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_PipeCreate &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>USBH_PipeDelete</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_PipeDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_PipeDelete &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>USBH_PipeModify</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, usbh_fs_stm32f4xx.o(i.USBH_PipeModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_PipeModify
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>USBH_PipeReset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_PipeReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_PipeReset
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>USBH_PipeTransfer</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbh_fs_stm32f4xx.o(i.USBH_PipeTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_PipeTransfer &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>USBH_PipeTransferAbort</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_PipeTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_PipeTransferAbort &rArr; USBH_CH_Disable &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>USBH_PipeTransferGetResult</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(i.USBH_PipeTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PipeTransferGetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>USBH_PortGetState</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(i.USBH_PortGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PortGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>USBH_PortReset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_PortReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_PortReset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>USBH_PortResume</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(i.USBH_PortResume))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>USBH_PortSuspend</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(i.USBH_PortSuspend))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>USBH_PortVbusOnOff</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_PortVbusOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_PortVbusOnOff &rArr; OTG_FS_PinVbusOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinVbusOnOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>USBH_PowerControl</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(i.USBH_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_PowerControl &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>USBH_Uninitialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(i.USBH_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_Uninitialize &rArr; OTG_FS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsUnconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[37c]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>

<P><STRONG><a name="[37d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>

<P><STRONG><a name="[294]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[295]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[282]"></a>FLASH_Program_Byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[285]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[283]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[284]"></a>FLASH_Program_Word</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[260]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[27f]"></a>FLASH_MassErase</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[70]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[2bb]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2ba]"></a>UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2c2]"></a>UART_SetConfig</STRONG> (Thumb, 992 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2be]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>NAND0_HW_SignalEventHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_config.o(i.NAND0_HW_SignalEventHandler))
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(i.fs_config_nand)
</UL>
<P><STRONG><a name="[75]"></a>NAND0_Media_SignalEventHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_config.o(i.NAND0_Media_SignalEventHandler))
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_MediaEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(i.fs_config_nand)
</UL>
<P><STRONG><a name="[4b1]"></a>fs_config_nand</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fs_config.o(i.fs_config_nand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_config_nand &rArr; fs_mutex_new &rArr; osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[f2]"></a>nand0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = nand0_DevCtrl &rArr; ftl_DevCtrl &rArr; ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>nand0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = nand0_Init &rArr; ftl_Init &rArr; ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>nand0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_RdInfo))
<BR><BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>nand0_RdSect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_config.o(i.nand0_RdSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = nand0_RdSect &rArr; ftl_ReadSect &rArr; SearchBTT &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>nand0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.nand0_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nand0_UnInit &rArr; ftl_UnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>nand0_WrSect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_config.o(i.nand0_WrSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = nand0_WrSect &rArr; ftl_WriteSect &rArr; SearchBTT &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>usb0_DevCtrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_config.o(i.usb0_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb0_DevCtrl &rArr; FS_USBH_MSC_DeviceCtrl &rArr; USBH_MSC_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_DeviceCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>usb0_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(i.usb0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb0_Init &rArr; FS_USBH_MSC_Initialize &rArr; USBH_MSC_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>usb0_RdInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(i.usb0_RdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb0_RdInfo &rArr; FS_USBH_MSC_ReadInfo &rArr; USBH_MSC_ReadCapacity
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>usb0_RdSect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_config.o(i.usb0_RdSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = usb0_RdSect &rArr; FS_USBH_MSC_ReadSectors &rArr; USBH_MSC_Read &rArr; USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_ReadSectors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>usb0_UnInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(i.usb0_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = usb0_UnInit &rArr; FS_USBH_MSC_Uninitialize &rArr; USBH_MSC_SCSI_TestUnitReady &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>usb0_WrSect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_config.o(i.usb0_WrSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = usb0_WrSect &rArr; FS_USBH_MSC_WriteSectors &rArr; USBH_MSC_Write &rArr; USBH_MSC_SCSI_Write10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_WriteSectors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[356]"></a>USBH_MsToTick</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbh_config_0.o(i.USBH_MsToTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MsToTick &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexAcquire
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[4a2]"></a>fs_component_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_component_init &rArr; fs_get_rtos_tick_freq &rArr; osKernelGetTickFreq &rArr; svcRtxKernelGetTickFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_evr
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[1db]"></a>AllocBlock</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, fs_nftl.o(i.AllocBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutBlockInQueue
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumBlocksInQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockFromQueue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindEmptyBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[242]"></a>CachePgRead</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, fs_nftl.o(i.CachePgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ReadPage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindEmptyBlock
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[245]"></a>CachePgWrite</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_nftl.o(i.CachePgWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CachePgWrite &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[324]"></a>CalcDataBlocks</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_nftl.o(i.CalcDataBlocks))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[244]"></a>DecodeECC</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, fs_nftl.o(i.DecodeECC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming8
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming512
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>

<P><STRONG><a name="[254]"></a>Drv_EraseBlock</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_nftl.o(i.Drv_EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Drv_EraseBlock &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[243]"></a>Drv_ReadPage</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_nftl.o(i.Drv_ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_ReadPage
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[257]"></a>Drv_SetupFeatures</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, fs_nftl.o(i.Drv_SetupFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_SetupFeatures
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_nand_feature_param
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_nand_feature_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[247]"></a>Drv_WritePage</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, fs_nftl.o(i.Drv_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[246]"></a>EncodeECC</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fs_nftl.o(i.EncodeECC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EncodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming8
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_Hamming512
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[25b]"></a>EraseBlock</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_nftl.o(i.EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = EraseBlock &rArr; MarkBlockBad &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[1dc]"></a>FindEmptyBlock</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, fs_nftl.o(i.FindEmptyBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FindEmptyBlock &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[1df]"></a>ForceDataGc</STRONG> (Thumb, 370 bytes, Stack size 80 bytes, fs_nftl.o(i.ForceDataGc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutBlockInQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockFromQueue
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindEmptyBlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[278]"></a>GcRun</STRONG> (Thumb, 914 bytes, Stack size 72 bytes, fs_nftl.o(i.GcRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GcRun &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIdxCacheSlot
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLSN
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[1e0]"></a>GetBlockFromQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fs_nftl.o(i.GetBlockFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetBlockFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumBlocksInQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[27a]"></a>GetIdxCacheSlot</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fs_nftl.o(i.GetIdxCacheSlot))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
</UL>

<P><STRONG><a name="[27b]"></a>GetLSN</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_nftl.o(i.GetLSN))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
</UL>

<P><STRONG><a name="[2f0]"></a>InitBtt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_nftl.o(i.InitBtt))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_resources
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[2ef]"></a>LoadBtt</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, fs_nftl.o(i.LoadBtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBtt
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
</UL>

<P><STRONG><a name="[4b7]"></a>Log2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_nftl.o(i.Log2))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_resources
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[25c]"></a>MarkBlockBad</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fs_nftl.o(i.MarkBlockBad))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MarkBlockBad &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[314]"></a>MoveBlock</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, fs_nftl.o(i.MoveBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MoveBlock &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
</UL>

<P><STRONG><a name="[1de]"></a>NumBlocksInQueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_nftl.o(i.NumBlocksInQueue))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockFromQueue
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[1dd]"></a>PutBlockInQueue</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fs_nftl.o(i.PutBlockInQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PutBlockInQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>

<P><STRONG><a name="[323]"></a>RdBootBlock</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fs_nftl.o(i.RdBootBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RdBootBlock &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ReadPage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDataBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_init_media
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Format
</UL>

<P><STRONG><a name="[277]"></a>RelocBlock</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, fs_nftl.o(i.RelocBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBlock
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBTT
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[32a]"></a>ScanBlock</STRONG> (Thumb, 532 bytes, Stack size 64 bytes, fs_nftl.o(i.ScanBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ScanBlock &rArr; CachePgRead &rArr; DecodeECC &rArr; ecc_Hamming512
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIdxCacheSlot
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[2f1]"></a>ScanTable</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, fs_nftl.o(i.ScanTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLSN
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[32b]"></a>SearchBTT</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, fs_nftl.o(i.SearchBTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = SearchBTT &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_ReadSect
</UL>

<P><STRONG><a name="[27c]"></a>SetLSN</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_nftl.o(i.SetLSN))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateBTT
</UL>

<P><STRONG><a name="[279]"></a>UpdateBTT</STRONG> (Thumb, 758 bytes, Stack size 88 bytes, fs_nftl.o(i.UpdateBTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = UpdateBTT &rArr;  ScanTable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTable
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBlock
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RelocBlock
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkBlockBad
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcRun
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgWrite
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CachePgRead
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocBlock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLSN
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceDataGc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_WriteSect
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDataBlock
</UL>

<P><STRONG><a name="[253]"></a>ecc_Hamming512</STRONG> (Thumb, 650 bytes, Stack size 36 bytes, fs_nftl.o(i.ecc_Hamming512))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ecc_Hamming512
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
</UL>

<P><STRONG><a name="[252]"></a>ecc_Hamming8</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, fs_nftl.o(i.ecc_Hamming8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecc_Hamming8
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeECC
</UL>

<P><STRONG><a name="[4b6]"></a>ftl_Format</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, fs_nftl.o(i.ftl_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ftl_Format &rArr; Drv_WritePage &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBtt
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeECC
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_WritePage
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_ReadPage
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_EraseBlock
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcDataBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_DevCtrl
</UL>

<P><STRONG><a name="[4b9]"></a>ftl_init_media</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, fs_nftl.o(i.ftl_init_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = ftl_init_media &rArr; LoadBtt &rArr; ScanTable &rArr; RelocBlock &rArr; AllocBlock &rArr; ForceDataGc &rArr;  RelocBlock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdBootBlock
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBtt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SetupFeatures
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_nand_setup_layout
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_SetupLayout
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAND_EccToLayout
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
</UL>

<P><STRONG><a name="[4b8]"></a>ftl_init_resources</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, fs_nftl.o(i.ftl_init_resources))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftl_init_resources
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log2
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBtt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_Init
</UL>

<P><STRONG><a name="[102]"></a>EraseBlock</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, fs_nand_media.o(i.EraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EraseBlock &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>GetFeatures</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, fs_nand_media.o(i.GetFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetFeatures &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>Initialize</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fs_nand_media.o(i.Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>ReadID</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, fs_nand_media.o(i.ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadID &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ReadPage</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fs_nand_media.o(i.ReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadPage &rArr; ReadPage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Seq
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[325]"></a>ReadPage_Cmd</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fs_nand_media.o(i.ReadPage_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReadPage_Cmd &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
</UL>

<P><STRONG><a name="[326]"></a>ReadPage_Seq</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, fs_nand_media.o(i.ReadPage_Seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadPage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage
</UL>

<P><STRONG><a name="[ff]"></a>ReadParamPage</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, fs_nand_media.o(i.ReadParamPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadParamPage &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDevReady
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>ReadStatus</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, fs_nand_media.o(i.ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadStatus &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>ResetDevice</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, fs_nand_media.o(i.ResetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetDevice &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>SendAddress</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fs_nand_media.o(i.SendAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeatures
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamPage
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeatures
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
</UL>

<P><STRONG><a name="[105]"></a>SetFeatures</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, fs_nand_media.o(i.SetFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SetFeatures &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>Uninitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fs_nand_media.o(i.Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[27d]"></a>WaitDevReady</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fs_nand_media.o(i.WaitDevReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WaitDevReady &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamPage
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeatures
</UL>

<P><STRONG><a name="[25e]"></a>WaitDrvBusy</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, fs_nand_media.o(i.WaitDrvBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Seq
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeatures
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDevice
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamPage
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Seq
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPage_Cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadID
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFeatures
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseBlock
</UL>

<P><STRONG><a name="[101]"></a>WritePage</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fs_nand_media.o(i.WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WritePage &rArr; WritePage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Seq
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_nand_media.o(.constdata)
</UL>
<P><STRONG><a name="[3b4]"></a>WritePage_Cmd</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, fs_nand_media.o(i.WritePage_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WritePage_Cmd &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
</UL>

<P><STRONG><a name="[3b5]"></a>WritePage_Seq</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, fs_nand_media.o(i.WritePage_Seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WritePage_Seq &rArr; WaitDrvBusy &rArr; fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitDrvBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePage
</UL>

<P><STRONG><a name="[353]"></a>CheckController</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_lib_core.o(i.CheckController))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryUninitialize
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitialize
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_Thread_ID_of_Pipe
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_PipeCallback_of_Pipe
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_ClearFeature
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
</UL>

<P><STRONG><a name="[3a4]"></a>CheckPipe</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, usbh_lib_core.o(i.CheckPipe))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[352]"></a>USBH_DefaultPipeCreate</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_DefaultPipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBH_DefaultPipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFree_PIPE
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[350]"></a>USBH_Engine</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_Engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = USBH_Engine &rArr; USBH_EnumerateDevice &rArr; USBH_MSC_Initialize_Lib &rArr; USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortGetState
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
</UL>

<P><STRONG><a name="[36a]"></a>USBH_EnumerateDevice</STRONG> (Thumb, 824 bytes, Stack size 72 bytes, usbh_lib_core.o(i.USBH_EnumerateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = USBH_EnumerateDevice &rArr; USBH_MSC_Initialize_Lib &rArr; USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Configure
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Unconfigure
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Initialize
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Configure
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Unconfigure
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Initialize_Lib
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Configure
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Configure
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify_Lib
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[34f]"></a>USBH_Notify_Lib</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_lib_core.o(i.USBH_Notify_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_Notify_Lib
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[3a5]"></a>USBH_PipeDoPing</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_PipeDoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
</UL>

<P><STRONG><a name="[349]"></a>USBH_PipeSendSetup</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_PipeSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_PipeSendSetup &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryIsInPool
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[369]"></a>USBH_PrepareEnumerateDevice</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_PrepareEnumerateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = USBH_PrepareEnumerateDevice &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[36b]"></a>USBH_RecoveryEnumerateDevice</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, usbh_lib_core.o(i.USBH_RecoveryEnumerateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = USBH_RecoveryEnumerateDevice &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[368]"></a>USBH_UninitializeDevices</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_UninitializeDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBH_UninitializeDevices &rArr; USBH_MSC_Unconfigure &rArr; USBH_PipeAbort &rArr; USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; isrRtxThreadFlagsSet &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Uninitialize_Lib
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Uninitialize
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Unconfigure
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Uninitialize_Lib
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Unconfigure
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Uninitialize_Lib
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[262]"></a>CheckInstance</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbh_lib_msc.o(i.CheckInstance))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetStatus
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ReadCapacity
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_WriteSectors
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_Uninitialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_ReadSectors
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_ReadInfo
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_Initialize
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_DeviceCtrl
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetDevice
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write10
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read10
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[391]"></a>USBH_MSC_SCSI_Inquiry</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, usbh_lib_msc.o(i.USBH_MSC_SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBH_MSC_SCSI_Inquiry &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[393]"></a>USBH_MSC_SCSI_Read10</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, usbh_lib_msc.o(i.USBH_MSC_SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USBH_MSC_SCSI_Read10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[392]"></a>USBH_MSC_SCSI_ReadCapacity</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, usbh_lib_msc.o(i.USBH_MSC_SCSI_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBH_MSC_SCSI_ReadCapacity &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[390]"></a>USBH_MSC_SCSI_RequestSense</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usbh_lib_msc.o(i.USBH_MSC_SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBH_MSC_SCSI_RequestSense &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[26b]"></a>USBH_MSC_SCSI_TestUnitReady</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, usbh_lib_msc.o(i.USBH_MSC_SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBH_MSC_SCSI_TestUnitReady &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_USBH_MSC_Uninitialize
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
</UL>

<P><STRONG><a name="[395]"></a>USBH_MSC_SCSI_Write10</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, usbh_lib_msc.o(i.USBH_MSC_SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USBH_MSC_SCSI_Write10 &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
</UL>

<P><STRONG><a name="[3e1]"></a>alloc_clus</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[3e2]"></a>alloc_table_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_table_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[3e4]"></a>alloc_table_write</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_table_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[428]"></a>bs_read</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, fs_fat.o(i.bs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bs_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[42a]"></a>bs_write</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, fs_fat.o(i.bs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bs_write &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[3e6]"></a>cache_fat</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_fat
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[42f]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[430]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[434]"></a>create_dot_entries</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = create_dot_entries &rArr; entry_flush &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[43a]"></a>create_sfn_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_sfn_entry &rArr; entry_flush &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[439]"></a>entry_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = entry_flush &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[4a6]"></a>entry_pos_comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[46d]"></a>entry_pos_inc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fs_fat.o(i.entry_pos_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[435]"></a>entry_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = entry_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[4a7]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[47b]"></a>extract_date</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_fat.o(i.extract_date))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[47c]"></a>extract_time</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs_fat.o(i.extract_time))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[512]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
</UL>

<P><STRONG><a name="[476]"></a>file_locked</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, fs_fat.o(i.file_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = file_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[471]"></a>find_param</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, fs_fat.o(i.find_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_param
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[438]"></a>format_date</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs_fat.o(i.format_date))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[437]"></a>format_time</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.format_time))
<BR><BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[4a5]"></a>frec_allocate</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[479]"></a>frec_delete</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fs_fat.o(i.frec_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = frec_delete &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[478]"></a>frec_delete_elink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat.o(i.frec_delete_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = frec_delete_elink &rArr; elink_cmd &rArr; elink_alloc &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[4a8]"></a>frec_find</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
</UL>

<P><STRONG><a name="[4ab]"></a>frec_find_elink</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = frec_find_elink &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
</UL>

<P><STRONG><a name="[475]"></a>frec_next</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, fs_fat.o(i.frec_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[48e]"></a>fsinfo_read</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsinfo_read &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[46f]"></a>fsinfo_write</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[3e3]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[4dc]"></a>get_RSVD</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_fat.o(i.get_RSVD))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
</UL>

<P><STRONG><a name="[3e5]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[482]"></a>get_root_clus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.get_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
</UL>

<P><STRONG><a name="[4db]"></a>j_chk_rsvd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fs_fat.o(i.j_chk_rsvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RSVD
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
</UL>

<P><STRONG><a name="[4de]"></a>j_clus_cnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.j_clus_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_rep_space
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
</UL>

<P><STRONG><a name="[48a]"></a>j_find_reg</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, fs_fat.o(i.j_find_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = j_find_reg &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_low_boundary
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
</UL>

<P><STRONG><a name="[4df]"></a>j_find_rsvd</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, fs_fat.o(i.j_find_rsvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_low_boundary
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RSVD
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>

<P><STRONG><a name="[487]"></a>j_init_fats</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fs_fat.o(i.j_init_fats))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = j_init_fats &rArr; j_find_rsvd &rArr; j_chk_rsvd &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_fat
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_mark_rsvd
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_chk_rsvd
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
</UL>

<P><STRONG><a name="[4dd]"></a>j_low_boundary</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.j_low_boundary))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_reg
</UL>

<P><STRONG><a name="[48b]"></a>j_mark_rsvd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fs_fat.o(i.j_mark_rsvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = j_mark_rsvd &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RSVD
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>

<P><STRONG><a name="[488]"></a>j_rep_space</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.j_rep_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = j_rep_space
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_set_space
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_clus_cnt
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
</UL>

<P><STRONG><a name="[47f]"></a>label_write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_fat.o(i.label_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = label_write &rArr; write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[491]"></a>link_clus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_fat.o(i.link_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = link_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[47e]"></a>mbr_write</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, fs_fat.o(i.mbr_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbr_write &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
</UL>

<P><STRONG><a name="[58b]"></a>name_analyse</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = name_analyse
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[4ac]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[58a]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[58c]"></a>name_validate</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, fs_fat.o(i.name_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
</UL>

<P><STRONG><a name="[490]"></a>path_create</STRONG> (Thumb, 404 bytes, Stack size 104 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[472]"></a>path_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_init
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[473]"></a>path_open</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[470]"></a>path_validate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = path_validate &rArr; name_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[48f]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_cache &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[429]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_find_rsvd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[4a9]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[4aa]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[4e0]"></a>switch_fat</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fs_fat.o(i.switch_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = switch_fat &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;j_init_fats
</UL>

<P><STRONG><a name="[477]"></a>unlink_clus</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = unlink_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[431]"></a>write_cache</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_cache &rArr; write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_format
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_write
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[42b]"></a>write_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_sector &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_prep
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_write
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_write
</UL>

<P><STRONG><a name="[45c]"></a>delete_list_add</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fs_fat_elink.o(i.delete_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
</UL>

<P><STRONG><a name="[45b]"></a>delete_list_discon</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_fat_elink.o(i.delete_list_discon))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delete_list_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_update
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
</UL>

<P><STRONG><a name="[45a]"></a>delete_list_update</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_fat_elink.o(i.delete_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delete_list_update &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_discon
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
</UL>

<P><STRONG><a name="[466]"></a>elink_alloc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_fat_elink.o(i.elink_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = elink_alloc &rArr; delete_list_discon
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_discon
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_list_discon
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
</UL>

<P><STRONG><a name="[467]"></a>elink_discon</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_discon))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_alloc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
</UL>

<P><STRONG><a name="[469]"></a>elink_rewind</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fs_fat_elink.o(i.elink_rewind))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
</UL>

<P><STRONG><a name="[24c]"></a>CheckJSect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fs_journal.o(i.CheckJSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckJSect
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJourn
</UL>

<P><STRONG><a name="[24e]"></a>CheckJourn</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, fs_journal.o(i.CheckJourn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckJourn &rArr; CheckJSect
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckJSect
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_init
</UL>

<P><STRONG><a name="[331]"></a>SetBuf</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fs_journal.o(i.SetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
</UL>

<P><STRONG><a name="[181]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; fsj_write &rArr; SetBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[191]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[5e8]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[5da]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[193]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[199]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
