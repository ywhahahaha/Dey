


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * Copyright (c) 2013-2021 Arm Limited. All rights rese
                       rved.
    3 00000000         ; *
    4 00000000         ; * SPDX-License-Identifier: Apache-2.0
    5 00000000         ; *
    6 00000000         ; * Licensed under the Apache License, Version 2.0 (the 
                       License); you may
    7 00000000         ; * not use this file except in compliance with the Lice
                       nse.
    8 00000000         ; * You may obtain a copy of the License at
    9 00000000         ; *
   10 00000000         ; * www.apache.org/licenses/LICENSE-2.0
   11 00000000         ; *
   12 00000000         ; * Unless required by applicable law or agreed to in wr
                       iting, software
   13 00000000         ; * distributed under the License is distributed on an A
                       S IS BASIS, WITHOUT
   14 00000000         ; * WARRANTIES OR CONDITIONS OF ANY KIND, either express
                        or implied.
   15 00000000         ; * See the License for the specific language governing 
                       permissions and
   16 00000000         ; * limitations under the License.
   17 00000000         ; *
   18 00000000         ; * ----------------------------------------------------
                       -------------------------
   19 00000000         ; *
   20 00000000         ; * Project:     CMSIS-RTOS RTX
   21 00000000         ; * Title:       ARMv7-M Exception handlers
   22 00000000         ; *
   23 00000000         ; * ----------------------------------------------------
                       -------------------------
   24 00000000         ; */
   25 00000000         
   26 00000000         
   27 00000000                 IF               :LNOT::DEF:RTX_STACK_CHECK
   29                          ENDIF
   30 00000000         
   31 00000000         ;IF       ({FPU}="FPv4-SP")
   32 00000000                 IF               {FPU} != "SoftVFP"
   33 00000000 00000001 
                       FPU_USED
                               EQU              1
   34 00000000                 ELSE
   36                          ENDIF
   37 00000000         
   38 00000000 00000014 
                       I_T_RUN_OFS
                               EQU              20          ; osRtxInfo.thread.
                                                            run offset
   39 00000000 00000038 
                       TCB_SP_OFS
                               EQU              56          ; TCB.SP offset
   40 00000000 00000022 
                       TCB_SF_OFS
                               EQU              34          ; TCB.stack_frame o
                                                            ffset
   41 00000000         
   42 00000000 E000EF34 



ARM Macro Assembler    Page 2 


                       FPCCR   EQU              0xE000EF34  ; FPCCR Address
   43 00000000         
   45 00000000 00000001 
                       osRtxErrorStackOverflow
                               EQU              1           ; Stack overflow
   46 00000000         
   47 00000000         
   48 00000000                 PRESERVE8
   49 00000000                 THUMB
   50 00000000         
   51 00000000         
   52 00000000                 AREA             |.constdata|, DATA, READONLY
   53 00000000                 EXPORT           irqRtxLib
   54 00000000 00      irqRtxLib
                               DCB              0           ; Non weak library 
                                                            reference
   55 00000001         
   56 00000001         
   57 00000001                 AREA             |.text|, CODE, READONLY
   58 00000000         
   59 00000000         
   60 00000000         SVC_Handler
                               PROC
   61 00000000                 EXPORT           SVC_Handler
   62 00000000                 IMPORT           osRtxUserSVC
   63 00000000                 IMPORT           osRtxInfo
   64 00000000                 IF               RTX_STACK_CHECK != 0
   67                          ENDIF
   68 00000000         
   69 00000000 F01E 0F04       TST              LR,#0x04    ; Determine return 
                                                            stack from EXC_RETU
                                                            RN bit 2
   70 00000004 BF0C            ITE              EQ
   71 00000006 F3EF 8008       MRSEQ            R0,MSP      ; Get MSP if return
                                                             stack is MSP
   72 0000000A F3EF 8009       MRSNE            R0,PSP      ; Get PSP if return
                                                             stack is PSP
   73 0000000E         
   74 0000000E 6981            LDR              R1,[R0,#24] ; Load saved PC fro
                                                            m stack
   75 00000010 F811 1C02       LDRB             R1,[R1,#-2] ; Load SVC number
   76 00000014 2900            CMP              R1,#0       ; Check SVC number
   77 00000016 D132            BNE              SVC_User    ; Branch if not SVC
                                                             0
   78 00000018         
   79 00000018 B501            PUSH             {R0,LR}     ; Save SP and EXC_R
                                                            ETURN
   80 0000001A E890 100F       LDM              R0,{R0-R3,R12} ; Load function 
                                                            parameters and addr
                                                            ess from stack
   81 0000001E 47E0            BLX              R12         ; Call service func
                                                            tion
   82 00000020 E8BD 5000       POP              {R12,LR}    ; Restore SP and EX
                                                            C_RETURN
   83 00000024 E88C 0003       STM              R12,{R0-R1} ; Store function re
                                                            turn values
   84 00000028         
   85 00000028         SVC_Context
   86 00000028 4B24            LDR              R3,=osRtxInfo+I_T_RUN_OFS ; Loa



ARM Macro Assembler    Page 3 


                                                            d address of osRtxI
                                                            nfo.thread.run
   87 0000002A E893 0006       LDM              R3,{R1,R2}  ; Load osRtxInfo.th
                                                            read.run: curr & ne
                                                            xt
   88 0000002E 4291            CMP              R1,R2       ; Check if thread s
                                                            witch is required
   89 00000030 BF08            IT               EQ
   90 00000032 4770            BXEQ             LR          ; Exit when threads
                                                             are the same
   91 00000034         
   92 00000034 601A            STR              R2,[R3]     ; osRtxInfo.thread.
                                                            run: curr = next
   93 00000036         
   94 00000036                 IF               FPU_USED != 0
   95 00000036 B941            CBNZ             R1,SVC_ContextSave ; Branch if 
                                                            running thread is n
                                                            ot deleted
   96 00000038         SVC_FP_LazyState
   97 00000038 F01E 0F10       TST              LR,#0x10    ; Determine stack f
                                                            rame from EXC_RETUR
                                                            N bit 4
   98 0000003C D110            BNE              SVC_ContextRestore ; Branch if 
                                                            not extended stack 
                                                            frame
   99 0000003E 4B20            LDR              R3,=FPCCR   ; FPCCR Address
  100 00000040 6818            LDR              R0,[R3]     ; Load FPCCR
  101 00000042 F020 0001       BIC              R0,R0,#1    ; Clear LSPACT (Laz
                                                            y state preservatio
                                                            n)
  102 00000046 6018            STR              R0,[R3]     ; Store FPCCR
  103 00000048 E00A            B                SVC_ContextRestore ; Branch to 
                                                            context restore han
                                                            dling
  104 0000004A                 ELSE
  106                          ENDIF
  107 0000004A         
  108 0000004A         SVC_ContextSave
  109 0000004A                 IF               RTX_STACK_CHECK != 0
  150 0000004A E92C 0FF0       STMDB            R12!,{R4-R11} ; Save R4..R11
  151 0000004E                 IF               FPU_USED != 0
  152 0000004E F01E 0F10       TST              LR,#0x10    ; Determine stack f
                                                            rame from EXC_RETUR
                                                            N bit 4
  153 00000052 BF08            IT               EQ          ; If extended stack
                                                             frame
  154 00000054 ED2C 8A10       VSTMDBEQ         R12!,{S16-S31} 
                                                            ;  Save VFP S16.S31
                                                            
  155 00000058 F881 E022       STRB             LR, [R1,#TCB_SF_OFS] ; Store st
                                                            ack frame informati
                                                            on
  156 0000005C                 ENDIF
  157 0000005C F8C1 C038       STR              R12,[R1,#TCB_SP_OFS] ; Store SP
                                                            
  158 00000060                 ENDIF
  159 00000060         
  160 00000060         SVC_ContextRestore
  161 00000060 6B90            LDR              R0,[R2,#TCB_SP_OFS] ; Load SP



ARM Macro Assembler    Page 4 


  162 00000062                 IF               FPU_USED != 0
  163 00000062 F892 1022       LDRB             R1,[R2,#TCB_SF_OFS] ; Load stac
                                                            k frame information
                                                            
  164 00000066 F061 0EFF       ORN              LR,R1,#0xFF ; Set EXC_RETURN
  165 0000006A F01E 0F10       TST              LR,#0x10    ; Determine stack f
                                                            rame from EXC_RETUR
                                                            N bit 4
  166 0000006E BF08            IT               EQ          ; If extended stack
                                                             frame
  167 00000070 ECB0 8A10       VLDMIAEQ         R0!,{S16-S31} ;  Restore VFP S1
                                                            6..S31
  168 00000074                 ELSE
  170                          ENDIF
  171 00000074 E8B0 0FF0       LDMIA            R0!,{R4-R11} ; Restore R4..R11
  172 00000078 F380 8809       MSR              PSP,R0      ; Set PSP
  173 0000007C         
  174 0000007C         SVC_Exit
  175 0000007C 4770            BX               LR          ; Exit from handler
                                                            
  176 0000007E         
  177 0000007E         SVC_User
  178 0000007E 4A11            LDR              R2,=osRtxUserSVC ; Load address
                                                             of SVC table
  179 00000080 6813            LDR              R3,[R2]     ; Load SVC maximum 
                                                            number
  180 00000082 4299            CMP              R1,R3       ; Check SVC number 
                                                            range
  181 00000084 D8FA            BHI              SVC_Exit    ; Branch if out of 
                                                            range
  182 00000086         
  183 00000086 B501            PUSH             {R0,LR}     ; Save SP and EXC_R
                                                            ETURN
  184 00000088 F852 C021       LDR              R12,[R2,R1,LSL #2] ; Load addre
                                                            ss of SVC function
  185 0000008C C80F            LDM              R0,{R0-R3}  ; Load function par
                                                            ameters from stack
  186 0000008E 47E0            BLX              R12         ; Call service func
                                                            tion
  187 00000090 E8BD 5000       POP              {R12,LR}    ; Restore SP and EX
                                                            C_RETURN
  188 00000094 F8CC 0000       STR              R0,[R12]    ; Store function re
                                                            turn value
  189 00000098         
  190 00000098 4770            BX               LR          ; Return from handl
                                                            er
  191 0000009A         
  192 0000009A 00 00           ALIGN
  193 0000009C                 ENDP
  194 0000009C         
  195 0000009C         
  196 0000009C         PendSV_Handler
                               PROC
  197 0000009C                 EXPORT           PendSV_Handler
  198 0000009C                 IMPORT           osRtxPendSV_Handler
  199 0000009C         
  200 0000009C B501            PUSH             {R0,LR}     ; Save EXC_RETURN
  201 0000009E F7FF FFFE       BL               osRtxPendSV_Handler ; Call osRt
                                                            xPendSV_Handler



ARM Macro Assembler    Page 5 


  202 000000A2 E8BD 4001       POP              {R0,LR}     ; Restore EXC_RETUR
                                                            N
  203 000000A6 F3EF 8C09       MRS              R12,PSP     ; Save PSP to R12
  204 000000AA E7BD            B                SVC_Context ; Branch to context
                                                             handling
  205 000000AC         
  206 000000AC                 ALIGN
  207 000000AC                 ENDP
  208 000000AC         
  209 000000AC         
  210 000000AC         SysTick_Handler
                               PROC
  211 000000AC                 EXPORT           SysTick_Handler
  212 000000AC                 IMPORT           osRtxTick_Handler
  213 000000AC         
  214 000000AC B501            PUSH             {R0,LR}     ; Save EXC_RETURN
  215 000000AE F7FF FFFE       BL               osRtxTick_Handler ; Call osRtxT
                                                            ick_Handler
  216 000000B2 E8BD 4001       POP              {R0,LR}     ; Restore EXC_RETUR
                                                            N
  217 000000B6 F3EF 8C09       MRS              R12,PSP     ; Save PSP to R12
  218 000000BA E7B5            B                SVC_Context ; Branch to context
                                                             handling
  219 000000BC         
  220 000000BC                 ALIGN
  221 000000BC                 ENDP
  222 000000BC         
  223 000000BC         
  224 000000BC                 END
              00000014 
              E000EF34 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\irq_armv7m.d -o.\objects\irq_armv7m.o -I.\RTE\CMSI
S -I.\RTE\CMSIS_Driver -I.\RTE\Device\STM32F407VGTx -I.\RTE\File_System -I.\RTE
\USB -I.\RTE\_I03M -IC:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\C
MSIS\Core\Include -IC:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CM
SIS\Driver\Include -IC:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\C
MSIS\RTOS2\Include -IC:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\C
MSIS\RTOS2\RTX\Include -IC:\Users\DFS-888\AppData\Local\Arm\Packs\Keil\MDK-Midd
leware\7.13.0\FileSystem\Include -IC:\Users\DFS-888\AppData\Local\Arm\Packs\Kei
l\MDK-Middleware\7.13.0\USB\Include -IC:\Users\DFS-888\AppData\Local\Arm\Packs\
Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Users\
DFS-888\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\STM32F4xx_HAL
_Driver\Inc --predefine="__RTX SETA 1" --predefine="__UVISION_VERSION SETA 529"
 --predefine="_RTE_ SETA 1" --predefine="STM32F407xx SETA 1" --list=.\listings\
irq_armv7m.lst C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\R
TOS2\RTX\Source\ARM\irq_armv7m.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.constdata 00000000

Symbol: .constdata
   Definitions
      At line 52 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      None
Comment: .constdata unused
irqRtxLib 00000000

Symbol: irqRtxLib
   Definitions
      At line 54 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 53 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: irqRtxLib used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 57 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      None
Comment: .text unused
PendSV_Handler 0000009C

Symbol: PendSV_Handler
   Definitions
      At line 196 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 197 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: PendSV_Handler used once
SVC_Context 00000028

Symbol: SVC_Context
   Definitions
      At line 85 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 204 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
      At line 218 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s

SVC_ContextRestore 00000060

Symbol: SVC_ContextRestore
   Definitions
      At line 160 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 98 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
      At line 103 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s

SVC_ContextSave 0000004A

Symbol: SVC_ContextSave
   Definitions
      At line 108 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 95 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: SVC_ContextSave used once
SVC_Exit 0000007C

Symbol: SVC_Exit
   Definitions
      At line 174 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 181 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: SVC_Exit used once
SVC_FP_LazyState 00000038

Symbol: SVC_FP_LazyState
   Definitions
      At line 96 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      None
Comment: SVC_FP_LazyState unused
SVC_Handler 00000000

Symbol: SVC_Handler
   Definitions
      At line 60 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 61 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: SVC_Handler used once
SVC_User 0000007E

Symbol: SVC_User
   Definitions
      At line 177 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 77 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: SVC_User used once
SysTick_Handler 000000AC

Symbol: SysTick_Handler
   Definitions
      At line 210 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 211 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: SysTick_Handler used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

FPCCR E000EF34

Symbol: FPCCR
   Definitions
      At line 42 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 99 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: FPCCR used once
FPU_USED 00000001

Symbol: FPU_USED
   Definitions
      At line 33 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 94 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
      At line 151 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
      At line 162 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s

I_T_RUN_OFS 00000014

Symbol: I_T_RUN_OFS
   Definitions
      At line 38 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 86 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: I_T_RUN_OFS used once
RTX_STACK_CHECK 00000000

Symbol: RTX_STACK_CHECK
   Definitions
      At line 28 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 64 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
      At line 109 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s

TCB_SF_OFS 00000022

Symbol: TCB_SF_OFS
   Definitions
      At line 40 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 155 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
      At line 163 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s

TCB_SP_OFS 00000038



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: TCB_SP_OFS
   Definitions
      At line 39 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 157 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
      At line 161 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s

osRtxErrorStackOverflow 00000001

Symbol: osRtxErrorStackOverflow
   Definitions
      At line 45 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      None
Comment: osRtxErrorStackOverflow unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

osRtxInfo 00000000

Symbol: osRtxInfo
   Definitions
      At line 63 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 86 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: osRtxInfo used once
osRtxPendSV_Handler 00000000

Symbol: osRtxPendSV_Handler
   Definitions
      At line 198 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 201 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: osRtxPendSV_Handler used once
osRtxTick_Handler 00000000

Symbol: osRtxTick_Handler
   Definitions
      At line 212 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 215 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: osRtxTick_Handler used once
osRtxUserSVC 00000000

Symbol: osRtxUserSVC
   Definitions
      At line 62 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.8
.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
   Uses
      At line 178 in file C:\Users\DFS-888\AppData\Local\Arm\Packs\ARM\CMSIS\5.
8.0\CMSIS\RTOS2\RTX\Source\ARM\irq_armv7m.s
Comment: osRtxUserSVC used once
4 symbols
361 symbols in table
